"""
Requirements.txt generator plugin for the scaffold generation system.
Generates Python dependencies based on components used.
"""
from typing import Dict, Any, Set


class RequirementsGenerator:
    """Generates requirements.txt for autocoder systems."""
    
    # Base requirements for all systems
    BASE_REQUIREMENTS = [
        "fastapi==0.104.1",
        "uvicorn[standard]==0.24.0",
        "pydantic==2.5.0",
        "pydantic-settings==2.1.0",
        "anyio==4.1.0",
        "httpx==0.25.2",
        "python-dotenv==1.0.0",
        "structlog==23.2.0",
    ]
    
    # Component-specific requirements
    COMPONENT_REQUIREMENTS = {
        "Store": [
            "sqlalchemy==2.0.23",
            "alembic==1.12.1",
            "asyncpg==0.29.0",  # PostgreSQL
            "aiomysql==0.2.0",  # MySQL
            "aiosqlite==0.19.0",  # SQLite
        ],
        "Accumulator": [
            "redis==5.0.1",
            "hiredis==2.2.3",
        ],
        "MessageBus": [
            "aio-pika==9.3.1",  # RabbitMQ
            "aiokafka==0.10.0",  # Kafka
        ],
        "StreamProcessor": [
            "apache-beam==2.52.0",
        ],
        "MetricsEndpoint": [
            "prometheus-client==0.19.0",
        ],
    }
    
    # Testing requirements
    TEST_REQUIREMENTS = [
        "pytest==7.4.3",
        "pytest-asyncio==0.21.1",
        "pytest-cov==4.1.0",
        "pytest-mock==3.12.0",
        "faker==20.1.0",
    ]
    
    # Development requirements
    DEV_REQUIREMENTS = [
        "black==23.11.0",
        "ruff==0.1.7",
        "mypy==1.7.1",
        "pre-commit==3.5.0",
    ]
    
    def generate(self, blueprint: Dict[str, Any], enable_metrics: bool = True) -> str:
        """Generate requirements.txt content based on system blueprint."""
        system = blueprint.get('system', {})
        components = system.get('components', [])
        
        # Collect all requirements
        requirements = set(self.BASE_REQUIREMENTS)
        
        # Add component-specific requirements
        component_types = {comp.get('type') for comp in components}
        for comp_type in component_types:
            if comp_type in self.COMPONENT_REQUIREMENTS:
                requirements.update(self.COMPONENT_REQUIREMENTS[comp_type])
        
        # Add metrics requirements if enabled
        if enable_metrics or "MetricsEndpoint" in component_types:
            requirements.update(self.COMPONENT_REQUIREMENTS.get("MetricsEndpoint", []))
        
        # Add OpenTelemetry if tracing is needed
        if self._needs_tracing(blueprint):
            requirements.update([
                "opentelemetry-api==1.21.0",
                "opentelemetry-sdk==1.21.0",
                "opentelemetry-instrumentation-fastapi==0.42b0",
                "opentelemetry-exporter-otlp==1.21.0",
            ])
        
        # Add authentication libraries if needed
        if self._needs_auth(blueprint):
            requirements.update([
                "python-jose[cryptography]==3.3.0",
                "passlib[bcrypt]==1.7.4",
                "python-multipart==0.0.6",
            ])
        
        # Sort requirements for consistency
        sorted_requirements = sorted(requirements)
        
        # Generate content
        content = ["# Production Requirements", "# Generated by Autocoder V5.2", ""]
        content.extend(sorted_requirements)
        content.extend(["", "# Testing Requirements", "# Install with: pip install -r requirements-test.txt"])
        
        # Also generate requirements-test.txt content
        self._generate_test_requirements(blueprint)
        
        return "\n".join(content)
    
    def _needs_tracing(self, blueprint: Dict[str, Any]) -> bool:
        """Check if system needs distributed tracing."""
        system = blueprint.get('system', {})
        # Multiple components with bindings indicate distributed system
        return len(system.get('components', [])) > 3 and len(system.get('bindings', [])) > 2
    
    def _needs_auth(self, blueprint: Dict[str, Any]) -> bool:
        """Check if system needs authentication."""
        components = blueprint.get('system', {}).get('components', [])
        # API endpoints typically need auth
        return any(comp.get('type') == 'APIEndpoint' for comp in components)
    
    def _generate_test_requirements(self, blueprint: Dict[str, Any]) -> str:
        """Generate requirements-test.txt content."""
        all_test_reqs = self.TEST_REQUIREMENTS + self.DEV_REQUIREMENTS
        return "\n".join([
            "# Testing and Development Requirements",
            "# Install with: pip install -r requirements-test.txt",
            "",
            "-r requirements.txt",
            "",
        ] + sorted(all_test_reqs))