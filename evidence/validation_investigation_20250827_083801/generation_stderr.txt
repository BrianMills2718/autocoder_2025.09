{"timestamp": "2025-08-27T08:38:01.817090", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Source"}
{"timestamp": "2025-08-27T08:38:01.817216", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Transformer"}
{"timestamp": "2025-08-27T08:38:01.817277", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: StreamProcessor"}
{"timestamp": "2025-08-27T08:38:01.817341", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Sink"}
{"timestamp": "2025-08-27T08:38:01.817405", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Store"}
{"timestamp": "2025-08-27T08:38:01.817468", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Controller"}
{"timestamp": "2025-08-27T08:38:01.817528", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: APIEndpoint"}
{"timestamp": "2025-08-27T08:38:01.817607", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Model"}
{"timestamp": "2025-08-27T08:38:01.817667", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Accumulator"}
{"timestamp": "2025-08-27T08:38:01.817708", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Router"}
{"timestamp": "2025-08-27T08:38:01.817760", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Aggregator"}
{"timestamp": "2025-08-27T08:38:01.817819", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: Filter"}
{"timestamp": "2025-08-27T08:38:01.817881", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Registered component class: WebSocket"}
{"timestamp": "2025-08-27T08:38:01.817937", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Built-in ComposedComponent types registered with capability-based composition"}
{"timestamp": "2025-08-27T08:38:01.817997", "level": "INFO", "logger_name": "ComponentRegistry", "message": "✅ Component Registry initialized with fail-hard validation and policy enforcement"}
[92m08:38:02 - LiteLLM:DEBUG[0m: http_handler.py:579 - Using AiohttpTransport...
[92m08:38:02 - LiteLLM:DEBUG[0m: http_handler.py:636 - Creating AiohttpTransport...
[92m08:38:08 - LiteLLM:DEBUG[0m: litellm_logging.py:180 - [Non-Blocking] Unable to import GenericAPILogger - LiteLLM Enterprise Feature - No module named 'litellm_enterprise'
[92m08:38:08 - LiteLLM:DEBUG[0m: transformation.py:17 - [Non-Blocking] Unable to import _ENTERPRISE_ResponsesSessionHandler - LiteLLM Enterprise Feature - No module named 'litellm_enterprise'
[92m08:38:08 - LiteLLM:DEBUG[0m: http_handler.py:579 - Using AiohttpTransport...
[92m08:38:08 - LiteLLM:DEBUG[0m: http_handler.py:636 - Creating AiohttpTransport...
[92m08:38:08 - LiteLLM:DEBUG[0m: http_handler.py:579 - Using AiohttpTransport...
[92m08:38:08 - LiteLLM:DEBUG[0m: http_handler.py:636 - Creating AiohttpTransport...
[92m08:38:08 - LiteLLM:DEBUG[0m: http_handler.py:579 - Using AiohttpTransport...
[92m08:38:08 - LiteLLM:DEBUG[0m: http_handler.py:636 - Creating AiohttpTransport...
{"timestamp": "2025-08-27T08:38:08.671154", "level": "INFO", "logger_name": "SecureTemplateSystem", "message": "✅ Registered 3 predefined templates"}
{"timestamp": "2025-08-27T08:38:08.671270", "level": "INFO", "logger_name": "SecureTemplateSystem", "message": "✅ Secure Template System initialized with AST-based fail-hard security validation"}
{"timestamp": "2025-08-27T08:38:08.672657", "level": "INFO", "logger_name": "NaturalLanguageParser", "message": "✅ Natural Language Parser initialized with fail-hard validation"}
{"timestamp": "2025-08-27T08:38:08.674621", "level": "INFO", "logger_name": "SchemaValidator", "message": "✅ Registered schema: ComponentData"}
{"timestamp": "2025-08-27T08:38:08.674701", "level": "INFO", "logger_name": "SchemaValidator", "message": "✅ Registered schema: SourceData"}
{"timestamp": "2025-08-27T08:38:08.674772", "level": "INFO", "logger_name": "SchemaValidator", "message": "✅ Registered schema: TransformerData"}
{"timestamp": "2025-08-27T08:38:08.674843", "level": "INFO", "logger_name": "SchemaValidator", "message": "✅ Registered schema: SinkData"}
{"timestamp": "2025-08-27T08:38:08.674901", "level": "INFO", "logger_name": "SchemaValidator", "message": "✅ Built-in schemas registered"}
{"timestamp": "2025-08-27T08:38:08.674958", "level": "INFO", "logger_name": "SchemaValidator", "message": "✅ Schema Validator initialized with fail-hard validation"}
{"timestamp": "2025-08-27T08:38:08.675468", "level": "INFO", "logger_name": "SchemaAwareComponentGenerator", "message": "✅ Schema-Aware Component Generator initialized with fail-hard validation"}
{"timestamp": "2025-08-27T08:38:08.676969", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Property Test Generator initialized with fail-hard validation"}
{"timestamp": "2025-08-27T08:38:08.792352", "level": "INFO", "logger_name": "MetricsCollector.PrometheusServer", "message": "Production Prometheus server running on port 9090"}
{"timestamp": "2025-08-27T08:38:08.797124", "level": "INFO", "logger_name": "port_auto_generator", "message": "ComponentPortAutoGenerator initialized", "component": "ComponentPortAutoGenerator", "operation": "init", "tags": {"template_count": 14}}
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:349 - 

[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:349 - [92mRequest to litellm:[0m
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:349 - [92mlitellm.completion(model='gemini/gemini-2.5-flash', messages=[{'role': 'system', 'content': 'You are an expert Autocoder System Architect AI. Your task is to interpret a well-specified natural language request for a distributed system and convert it into a structured Pydantic model representation called \'IntermediateSystem\'.\n\nCRITICAL ARCHITECTURAL REQUIREMENTS:\n1. EVERY system MUST have at least one terminal component (Sink or Store)\n2. EVERY Source MUST have a data path to at least one terminal component\n3. NO component can be orphaned - all components MUST be connected via bindings\n4. MINIMUM valid system: Source → [optional Transformer] → Sink/Store\n\nCRITICAL SYSTEM NAMING RULES:\n- Generate system names that EXACTLY match the user\'s request\n- If user says "make me a to-do app", name it "todo_app_system" or similar\n- If user says "build a chat application", name it "chat_application_system"\n- NEVER use generic examples - ALWAYS match the user\'s specific domain\n\nREQUIRED VALIDATION RULES YOUR SYSTEM MUST PASS:\n✓ At least one data source (Source, EventSource, or APIEndpoint)\n✓ At least one terminal component (Sink or Store) \n✓ Complete bindings connecting ALL components (no orphans)\n✓ Every source must have a path to a terminal\n\nCOMMON VALID PATTERNS:\n- API Pattern: APIEndpoint → Controller → Store\n- Pipeline Pattern: Source → Transformer → Sink\n- Service Pattern: APIEndpoint → Transformer → Store\n- Simple Pattern: Source → Store\n\nThe IntermediateSystem model is defined as follows:\n\nclass IntermediateSystem(BaseModel):\n    name: str # System name in snake_case (e.g., "my_new_system")\n    description: str # Comprehensive architectural description\n    version: str = "1.0.0" # System version (semver)\n    components: list[IntermediateComponent] # List of system components\n    bindings: list[IntermediateBinding] = [] # Data flow connections\n    environment: Literal["development", "staging", "production"] = "development"\n\nclass IntermediateComponent(BaseModel):\n    name: str # Component name in snake_case\n    type: Literal["Source", "Transformer", "Accumulator", "Store", "Controller", "Sink", "StreamProcessor", "Model", "APIEndpoint", "Router"]\n    description: str\n    inputs: list[IntermediatePort] = []\n    outputs: list[IntermediatePort] = []\n    config: Dict[str, Any] = {}\n\nclass IntermediatePort(BaseModel):\n    name: str # Port name in snake_case\n    schema_type: Literal["object", "array", "string", "number", "integer", "boolean"]\n    description: Optional[str] = None\n\nclass IntermediateBinding(BaseModel):\n    from_component: str\n    from_port: str\n    to_component: str\n    to_port: str\n\nCRITICAL COMPONENT TYPE RULES:\nComponent types MUST be EXACTLY one of: "Source", "Transformer", "Accumulator", "Store", "Controller", "Sink", "StreamProcessor", "Model", "APIEndpoint", "Router"\n\nCRITICAL SCHEMA CONSISTENCY RULES:\nWhen creating bindings between components, you MUST ensure schema compatibility:\n\n1. EXACT MATCH RULE: If you create a binding from ComponentA.output to ComponentB.input, then:\n   - ComponentA.output.schema_type MUST be compatible with ComponentB.input.schema_type\n   - Compatible means: same type OR the receiving port uses "object" (which can accept anything)\n\n2. COMMON DATA FLOW PATTERNS:\n   - Controller → Store: If Controller outputs business objects (schema_type: "object"), Store MUST accept "object"\n   - APIEndpoint → Controller: Both should use "object" for request/response data\n   - Source → Transformer: Match the data type (if Source outputs "array", Transformer accepts "array")\n   - Transformer → Sink/Store: Output and input types must match\n\n3. SCHEMA TYPE GUIDELINES:\n   - "object": Use for complex business data (users, tasks, orders, etc.)\n   - "integer": Use for IDs, counts, quantities\n   - "string": Use for text, names, messages\n   - "array": Use for collections of items\n   - "boolean": Use for flags, status indicators\n   - "number": Use for measurements, prices, decimals\n\n4. BINDING VALIDATION BEFORE CREATION:\n   Before adding any binding, verify:\n   - Does from_component have an output port named from_port? \n   - Does to_component have an input port named to_port?\n   - Are their schema_types compatible?\n   - If not, adjust the port schema_types to ensure compatibility\n\nCOMPONENT-SPECIFIC PORT PATTERNS:\n- APIEndpoint: inputs=[{name:"request", schema_type:"object"}], outputs=[{name:"response", schema_type:"object"}]\n- Controller: inputs=[{name:"input", schema_type:"object"}], outputs=[{name:"output", schema_type:"object"}]\n- Store: inputs=[{name:"data", schema_type:"object"}], outputs=[] (no outputs!)\n- Sink: inputs=[{name:"input", schema_type:<match_source>}], outputs=[] (no outputs!)\n- Transformer: inputs=[{name:"input", schema_type:<match_source>}], outputs=[{name:"output", schema_type:<match_target>}]\n\nCRITICAL BINDING RULES:\n- Bindings MUST connect from an OUTPUT port of one component to an INPUT port of another\n- Store and Sink components have NO output ports (they are terminal)\n- Source components have NO input ports (they generate data)\n- APIEndpoint.request is an external entry point - do NOT create bindings TO it\n\nEXAMPLE OF MINIMUM VALID SYSTEM:\n{\n  "name": "minimal_data_pipeline",\n  "components": [\n    {\n      "name": "data_source",\n      "type": "Source",\n      "outputs": [{"name": "output", "schema_type": "object"}]\n    },\n    {\n      "name": "data_store", \n      "type": "Store",\n      "inputs": [{"name": "input", "schema_type": "object"}]\n    }\n  ],\n  "bindings": [\n    {\n      "from_component": "data_source",\n      "from_port": "output",\n      "to_component": "data_store",\n      "to_port": "input"\n    }\n  ]\n}\n\nVALIDATION CHECKLIST BEFORE RETURNING:\n☐ Does the system have at least one terminal component (Sink/Store)?\n☐ Are all sources connected to terminals via bindings?\n☐ Are there any orphaned components with no connections?\n☐ Do all bindings reference existing component ports?\n\nBefore returning your response, verify:\n1. All component names match the user\'s domain (not generic examples)\n2. All bindings connect existing ports\n3. All connected ports have compatible schema_types\n4. No bindings FROM components without outputs (Store, Sink)\n5. No bindings TO APIEndpoint.request\n\nReturn ONLY the JSON object, no markdown formatting, no explanations.\n\nCRITICAL JSON FORMAT:\nPorts must be objects with name, schema_type, and description fields:\n{\n  "name": "port_name",\n  "schema_type": "object",  // MUST match connected ports!\n  "description": "Port description"\n}'}, {'role': 'user', 'content': 'Validation Test System\n\nIMPORTANT: Return ONLY valid JSON, no other text.'}], temperature=0.1, max_tokens=8192)[0m
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:349 - 

[92m08:38:08 - LiteLLM:DEBUG[0m: litellm_logging.py:475 - self.optional_params: {}
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:349 - SYNC kwargs[caching]: False; litellm.cache: None; kwargs.get('cache')['no-cache']: False
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'vertex_ai/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'vertex_ai/gemini-2.5-flash', 'custom_llm_provider': 'vertex_ai'}
[92m08:38:08 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:3263 - 
LiteLLM: Params passed to completion() {'model': 'gemini-2.5-flash', 'functions': None, 'function_call': None, 'temperature': 0.1, 'top_p': None, 'n': None, 'stream': None, 'stream_options': None, 'stop': None, 'max_tokens': 8192, 'max_completion_tokens': None, 'modalities': None, 'prediction': None, 'audio': None, 'presence_penalty': None, 'frequency_penalty': None, 'logit_bias': None, 'user': None, 'custom_llm_provider': 'gemini', 'response_format': None, 'seed': None, 'tools': None, 'tool_choice': None, 'max_retries': None, 'logprobs': None, 'top_logprobs': None, 'extra_headers': None, 'api_version': None, 'parallel_tool_calls': None, 'drop_params': None, 'allowed_openai_params': None, 'reasoning_effort': None, 'additional_drop_params': None, 'messages': [{'role': 'system', 'content': 'You are an expert Autocoder System Architect AI. Your task is to interpret a well-specified natural language request for a distributed system and convert it into a structured Pydantic model representation called \'IntermediateSystem\'.\n\nCRITICAL ARCHITECTURAL REQUIREMENTS:\n1. EVERY system MUST have at least one terminal component (Sink or Store)\n2. EVERY Source MUST have a data path to at least one terminal component\n3. NO component can be orphaned - all components MUST be connected via bindings\n4. MINIMUM valid system: Source → [optional Transformer] → Sink/Store\n\nCRITICAL SYSTEM NAMING RULES:\n- Generate system names that EXACTLY match the user\'s request\n- If user says "make me a to-do app", name it "todo_app_system" or similar\n- If user says "build a chat application", name it "chat_application_system"\n- NEVER use generic examples - ALWAYS match the user\'s specific domain\n\nREQUIRED VALIDATION RULES YOUR SYSTEM MUST PASS:\n✓ At least one data source (Source, EventSource, or APIEndpoint)\n✓ At least one terminal component (Sink or Store) \n✓ Complete bindings connecting ALL components (no orphans)\n✓ Every source must have a path to a terminal\n\nCOMMON VALID PATTERNS:\n- API Pattern: APIEndpoint → Controller → Store\n- Pipeline Pattern: Source → Transformer → Sink\n- Service Pattern: APIEndpoint → Transformer → Store\n- Simple Pattern: Source → Store\n\nThe IntermediateSystem model is defined as follows:\n\nclass IntermediateSystem(BaseModel):\n    name: str # System name in snake_case (e.g., "my_new_system")\n    description: str # Comprehensive architectural description\n    version: str = "1.0.0" # System version (semver)\n    components: list[IntermediateComponent] # List of system components\n    bindings: list[IntermediateBinding] = [] # Data flow connections\n    environment: Literal["development", "staging", "production"] = "development"\n\nclass IntermediateComponent(BaseModel):\n    name: str # Component name in snake_case\n    type: Literal["Source", "Transformer", "Accumulator", "Store", "Controller", "Sink", "StreamProcessor", "Model", "APIEndpoint", "Router"]\n    description: str\n    inputs: list[IntermediatePort] = []\n    outputs: list[IntermediatePort] = []\n    config: Dict[str, Any] = {}\n\nclass IntermediatePort(BaseModel):\n    name: str # Port name in snake_case\n    schema_type: Literal["object", "array", "string", "number", "integer", "boolean"]\n    description: Optional[str] = None\n\nclass IntermediateBinding(BaseModel):\n    from_component: str\n    from_port: str\n    to_component: str\n    to_port: str\n\nCRITICAL COMPONENT TYPE RULES:\nComponent types MUST be EXACTLY one of: "Source", "Transformer", "Accumulator", "Store", "Controller", "Sink", "StreamProcessor", "Model", "APIEndpoint", "Router"\n\nCRITICAL SCHEMA CONSISTENCY RULES:\nWhen creating bindings between components, you MUST ensure schema compatibility:\n\n1. EXACT MATCH RULE: If you create a binding from ComponentA.output to ComponentB.input, then:\n   - ComponentA.output.schema_type MUST be compatible with ComponentB.input.schema_type\n   - Compatible means: same type OR the receiving port uses "object" (which can accept anything)\n\n2. COMMON DATA FLOW PATTERNS:\n   - Controller → Store: If Controller outputs business objects (schema_type: "object"), Store MUST accept "object"\n   - APIEndpoint → Controller: Both should use "object" for request/response data\n   - Source → Transformer: Match the data type (if Source outputs "array", Transformer accepts "array")\n   - Transformer → Sink/Store: Output and input types must match\n\n3. SCHEMA TYPE GUIDELINES:\n   - "object": Use for complex business data (users, tasks, orders, etc.)\n   - "integer": Use for IDs, counts, quantities\n   - "string": Use for text, names, messages\n   - "array": Use for collections of items\n   - "boolean": Use for flags, status indicators\n   - "number": Use for measurements, prices, decimals\n\n4. BINDING VALIDATION BEFORE CREATION:\n   Before adding any binding, verify:\n   - Does from_component have an output port named from_port? \n   - Does to_component have an input port named to_port?\n   - Are their schema_types compatible?\n   - If not, adjust the port schema_types to ensure compatibility\n\nCOMPONENT-SPECIFIC PORT PATTERNS:\n- APIEndpoint: inputs=[{name:"request", schema_type:"object"}], outputs=[{name:"response", schema_type:"object"}]\n- Controller: inputs=[{name:"input", schema_type:"object"}], outputs=[{name:"output", schema_type:"object"}]\n- Store: inputs=[{name:"data", schema_type:"object"}], outputs=[] (no outputs!)\n- Sink: inputs=[{name:"input", schema_type:<match_source>}], outputs=[] (no outputs!)\n- Transformer: inputs=[{name:"input", schema_type:<match_source>}], outputs=[{name:"output", schema_type:<match_target>}]\n\nCRITICAL BINDING RULES:\n- Bindings MUST connect from an OUTPUT port of one component to an INPUT port of another\n- Store and Sink components have NO output ports (they are terminal)\n- Source components have NO input ports (they generate data)\n- APIEndpoint.request is an external entry point - do NOT create bindings TO it\n\nEXAMPLE OF MINIMUM VALID SYSTEM:\n{\n  "name": "minimal_data_pipeline",\n  "components": [\n    {\n      "name": "data_source",\n      "type": "Source",\n      "outputs": [{"name": "output", "schema_type": "object"}]\n    },\n    {\n      "name": "data_store", \n      "type": "Store",\n      "inputs": [{"name": "input", "schema_type": "object"}]\n    }\n  ],\n  "bindings": [\n    {\n      "from_component": "data_source",\n      "from_port": "output",\n      "to_component": "data_store",\n      "to_port": "input"\n    }\n  ]\n}\n\nVALIDATION CHECKLIST BEFORE RETURNING:\n☐ Does the system have at least one terminal component (Sink/Store)?\n☐ Are all sources connected to terminals via bindings?\n☐ Are there any orphaned components with no connections?\n☐ Do all bindings reference existing component ports?\n\nBefore returning your response, verify:\n1. All component names match the user\'s domain (not generic examples)\n2. All bindings connect existing ports\n3. All connected ports have compatible schema_types\n4. No bindings FROM components without outputs (Store, Sink)\n5. No bindings TO APIEndpoint.request\n\nReturn ONLY the JSON object, no markdown formatting, no explanations.\n\nCRITICAL JSON FORMAT:\nPorts must be objects with name, schema_type, and description fields:\n{\n  "name": "port_name",\n  "schema_type": "object",  // MUST match connected ports!\n  "description": "Port description"\n}'}, {'role': 'user', 'content': 'Validation Test System\n\nIMPORTANT: Return ONLY valid JSON, no other text.'}], 'thinking': None, 'web_search_options': None}
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:3266 - 
LiteLLM: Non-Default params passed to completion() {'temperature': 0.1, 'max_tokens': 8192}
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:349 - Final returned optional params: {'temperature': 0.1, 'max_output_tokens': 8192}
[92m08:38:08 - LiteLLM:DEBUG[0m: litellm_logging.py:475 - self.optional_params: {'temperature': 0.1, 'max_tokens': 8192}
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:08 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:08 - LiteLLM:DEBUG[0m: litellm_logging.py:921 - [92m

POST Request Sent from LiteLLM:
curl -X POST \
https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=*****BZx8 \
-H 'Content-Type: application/json' \
-d '{'contents': [{'role': 'user', 'parts': [{'text': 'Validation Test System\n\nIMPORTANT: Return ONLY valid JSON, no other text.'}]}], 'system_instruction': {'parts': [{'text': 'You are an expert Autocoder System Architect AI. Your task is to interpret a well-specified natural language request for a distributed system and convert it into a structured Pydantic model representation called \'IntermediateSystem\'.\n\nCRITICAL ARCHITECTURAL REQUIREMENTS:\n1. EVERY system MUST have at least one terminal component (Sink or Store)\n2. EVERY Source MUST have a data path to at least one terminal component\n3. NO component can be orphaned - all components MUST be connected via bindings\n4. MINIMUM valid system: Source → [optional Transformer] → Sink/Store\n\nCRITICAL SYSTEM NAMING RULES:\n- Generate system names that EXACTLY match the user\'s request\n- If user says "make me a to-do app", name it "todo_app_system" or similar\n- If user says "build a chat application", name it "chat_application_system"\n- NEVER use generic examples - ALWAYS match the user\'s specific domain\n\nREQUIRED VALIDATION RULES YOUR SYSTEM MUST PASS:\n✓ At least one data source (Source, EventSource, or APIEndpoint)\n✓ At least one terminal component (Sink or Store) \n✓ Complete bindings connecting ALL components (no orphans)\n✓ Every source must have a path to a terminal\n\nCOMMON VALID PATTERNS:\n- API Pattern: APIEndpoint → Controller → Store\n- Pipeline Pattern: Source → Transformer → Sink\n- Service Pattern: APIEndpoint → Transformer → Store\n- Simple Pattern: Source → Store\n\nThe IntermediateSystem model is defined as follows:\n\nclass IntermediateSystem(BaseModel):\n    name: str # System name in snake_case (e.g., "my_new_system")\n    description: str # Comprehensive architectural description\n    version: str = "1.0.0" # System version (semver)\n    components: list[IntermediateComponent] # List of system components\n    bindings: list[IntermediateBinding] = [] # Data flow connections\n    environment: Literal["development", "staging", "production"] = "development"\n\nclass IntermediateComponent(BaseModel):\n    name: str # Component name in snake_case\n    type: Literal["Source", "Transformer", "Accumulator", "Store", "Controller", "Sink", "StreamProcessor", "Model", "APIEndpoint", "Router"]\n    description: str\n    inputs: list[IntermediatePort] = []\n    outputs: list[IntermediatePort] = []\n    config: Dict[str, Any] = {}\n\nclass IntermediatePort(BaseModel):\n    name: str # Port name in snake_case\n    schema_type: Literal["object", "array", "string", "number", "integer", "boolean"]\n    description: Optional[str] = None\n\nclass IntermediateBinding(BaseModel):\n    from_component: str\n    from_port: str\n    to_component: str\n    to_port: str\n\nCRITICAL COMPONENT TYPE RULES:\nComponent types MUST be EXACTLY one of: "Source", "Transformer", "Accumulator", "Store", "Controller", "Sink", "StreamProcessor", "Model", "APIEndpoint", "Router"\n\nCRITICAL SCHEMA CONSISTENCY RULES:\nWhen creating bindings between components, you MUST ensure schema compatibility:\n\n1. EXACT MATCH RULE: If you create a binding from ComponentA.output to ComponentB.input, then:\n   - ComponentA.output.schema_type MUST be compatible with ComponentB.input.schema_type\n   - Compatible means: same type OR the receiving port uses "object" (which can accept anything)\n\n2. COMMON DATA FLOW PATTERNS:\n   - Controller → Store: If Controller outputs business objects (schema_type: "object"), Store MUST accept "object"\n   - APIEndpoint → Controller: Both should use "object" for request/response data\n   - Source → Transformer: Match the data type (if Source outputs "array", Transformer accepts "array")\n   - Transformer → Sink/Store: Output and input types must match\n\n3. SCHEMA TYPE GUIDELINES:\n   - "object": Use for complex business data (users, tasks, orders, etc.)\n   - "integer": Use for IDs, counts, quantities\n   - "string": Use for text, names, messages\n   - "array": Use for collections of items\n   - "boolean": Use for flags, status indicators\n   - "number": Use for measurements, prices, decimals\n\n4. BINDING VALIDATION BEFORE CREATION:\n   Before adding any binding, verify:\n   - Does from_component have an output port named from_port? \n   - Does to_component have an input port named to_port?\n   - Are their schema_types compatible?\n   - If not, adjust the port schema_types to ensure compatibility\n\nCOMPONENT-SPECIFIC PORT PATTERNS:\n- APIEndpoint: inputs=[{name:"request", schema_type:"object"}], outputs=[{name:"response", schema_type:"object"}]\n- Controller: inputs=[{name:"input", schema_type:"object"}], outputs=[{name:"output", schema_type:"object"}]\n- Store: inputs=[{name:"data", schema_type:"object"}], outputs=[] (no outputs!)\n- Sink: inputs=[{name:"input", schema_type:<match_source>}], outputs=[] (no outputs!)\n- Transformer: inputs=[{name:"input", schema_type:<match_source>}], outputs=[{name:"output", schema_type:<match_target>}]\n\nCRITICAL BINDING RULES:\n- Bindings MUST connect from an OUTPUT port of one component to an INPUT port of another\n- Store and Sink components have NO output ports (they are terminal)\n- Source components have NO input ports (they generate data)\n- APIEndpoint.request is an external entry point - do NOT create bindings TO it\n\nEXAMPLE OF MINIMUM VALID SYSTEM:\n{\n  "name": "minimal_data_pipeline",\n  "components": [\n    {\n      "name": "data_source",\n      "type": "Source",\n      "outputs": [{"name": "output", "schema_type": "object"}]\n    },\n    {\n      "name": "data_store", \n      "type": "Store",\n      "inputs": [{"name": "input", "schema_type": "object"}]\n    }\n  ],\n  "bindings": [\n    {\n      "from_component": "data_source",\n      "from_port": "output",\n      "to_component": "data_store",\n      "to_port": "input"\n    }\n  ]\n}\n\nVALIDATION CHECKLIST BEFORE RETURNING:\n☐ Does the system have at least one terminal component (Sink/Store)?\n☐ Are all sources connected to terminals via bindings?\n☐ Are there any orphaned components with no connections?\n☐ Do all bindings reference existing component ports?\n\nBefore returning your response, verify:\n1. All component names match the user\'s domain (not generic examples)\n2. All bindings connect existing ports\n3. All connected ports have compatible schema_types\n4. No bindings FROM components without outputs (Store, Sink)\n5. No bindings TO APIEndpoint.request\n\nReturn ONLY the JSON object, no markdown formatting, no explanations.\n\nCRITICAL JSON FORMAT:\nPorts must be objects with name, schema_type, and description fields:\n{\n  "name": "port_name",\n  "schema_type": "object",  // MUST match connected ports!\n  "description": "Port description"\n}'}]}, 'generationConfig': {'temperature': 0.1, 'max_output_tokens': 8192}}'
[0m

[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:349 - RAW RESPONSE:
{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "```json\n{\n  \"name\": \"validation_test_system\",\n  \"description\": \"A simple system designed to demonstrate compliance with all architectural and binding rules, including a source, a transformer, and a terminal store.\",\n  \"version\": \"1.0.0\",\n  \"components\": [\n    {\n      \"name\": \"data_generator\",\n      \"type\": \"Source\",\n      \"description\": \"Generates raw data records for processing.\",\n      \"inputs\": [],\n      \"outputs\": [\n        {\n          \"name\": \"output_data\",\n          \"schema_type\": \"object\",\n          \"description\": \"Raw data record.\"\n        }\n      ],\n      \"config\": {}\n    },\n    {\n      \"name\": \"data_processor\",\n      \"type\": \"Transformer\",\n      \"description\": \"Processes and transforms incoming data records.\",\n      \"inputs\": [\n        {\n          \"name\": \"input_data\",\n          \"schema_type\": \"object\",\n          \"description\": \"Raw data record from generator.\"\n        }\n      ],\n      \"outputs\": [\n        {\n          \"name\": \"processed_data\",\n          \"schema_type\": \"object\",\n          \"description\": \"Transformed data record.\"\n        }\n      ],\n      \"config\": {}\n    },\n    {\n      \"name\": \"data_persister\",\n      \"type\": \"Store\",\n      \"description\": \"Persists processed data records into a database.\",\n      \"inputs\": [\n        {\n          \"name\": \"store_data\",\n          \"schema_type\": \"object\",\n          \"description\": \"Processed data record to be stored.\"\n        }\n      ],\n      \"outputs\": [],\n      \"config\": {}\n    }\n  ],\n  \"bindings\": [\n    {\n      \"from_component\": \"data_generator\",\n      \"from_port\": \"output_data\",\n      \"to_component\": \"data_processor\",\n      \"to_port\": \"input_data\"\n    },\n    {\n      \"from_component\": \"data_processor\",\n      \"from_port\": \"processed_data\",\n      \"to_component\": \"data_persister\",\n      \"to_port\": \"store_data\"\n    }\n  ],\n  \"environment\": \"development\"\n}\n```"
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 1652,
    "candidatesTokenCount": 530,
    "totalTokenCount": 2597,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 1652
      }
    ],
    "thoughtsTokenCount": 415
  },
  "modelVersion": "gemini-2.5-flash",
  "responseId": "ZiavaPmzM-2fz7IPwuDDuA4"
}



[92m08:38:14 - LiteLLM:INFO[0m: utils.py:1262 - Wrapper: Completed Call, calling success_handler
[92m08:38:14 - LiteLLM:DEBUG[0m: litellm_logging.py:1594 - Logging Details LiteLLM-Success Call: Cache_hit=None
[92m08:38:14 - LiteLLM:DEBUG[0m: cost_calculator.py:675 - selected model name for cost calculation: gemini/gemini-2.5-flash
[92m08:38:14 - LiteLLM:DEBUG[0m: cost_calculator.py:675 - selected model name for cost calculation: gemini/gemini-2.5-flash
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
[92m08:38:14 - LiteLLM:DEBUG[0m: litellm_logging.py:1223 - response_cost: 0.0028581
[92m08:38:14 - LiteLLM:DEBUG[0m: litellm_logging.py:1223 - response_cost: 0.0028581
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:349 - 

[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:349 - [92mRequest to litellm:[0m
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:349 - [92mlitellm.completion(model='gemini/gemini-2.5-flash', messages=[{'role': 'system', 'content': "Generate a human-readable summary of the following system using this format:\n\nGOAL: [Concise statement of system's primary goal]\nCOMPONENTS:\n- [Component Name]: [Type] - [Description]\nBINDINGS:\n- [From Component].[From Port] -> [To Component].[To Port]\nCONFIGURATION:\n- [Key]: [Value]"}, {'role': 'user', 'content': 'Generate the structured natural language summary for this system:\n\n{\n  "name": "validation_test_system",\n  "description": "A simple system designed to demonstrate compliance with all architectural and binding rules, including a source, a transformer, and a terminal store.",\n  "version": "1.0.0",\n  "components": [\n    {\n      "name": "data_generator",\n      "type": "Source",\n      "description": "Generates raw data records for processing.",\n      "inputs": [],\n      "outputs": [\n        {\n          "name": "output_data",\n          "schema_type": "object",\n          "description": "Raw data record.",\n          "required": true\n        }\n      ],\n      "config": {}\n    },\n    {\n      "name": "data_processor",\n      "type": "Transformer",\n      "description": "Processes and transforms incoming data records.",\n      "inputs": [\n        {\n          "name": "input_data",\n          "schema_type": "object",\n          "description": "Raw data record from generator.",\n          "required": true\n        }\n      ],\n      "outputs": [\n        {\n          "name": "processed_data",\n          "schema_type": "object",\n          "description": "Transformed data record.",\n          "required": true\n        }\n      ],\n      "config": {}\n    },\n    {\n      "name": "data_persister",\n      "type": "Store",\n      "description": "Persists processed data records into a database.",\n      "inputs": [\n        {\n          "name": "store_data",\n          "schema_type": "object",\n          "description": "Processed data record to be stored.",\n          "required": true\n        }\n      ],\n      "outputs": [],\n      "config": {}\n    }\n  ],\n  "bindings": [\n    {\n      "from_component": "data_generator",\n      "from_port": "output_data",\n      "to_component": "data_processor",\n      "to_port": "input_data"\n    },\n    {\n      "from_component": "data_processor",\n      "from_port": "processed_data",\n      "to_component": "data_persister",\n      "to_port": "store_data"\n    }\n  ],\n  "environment": "development"\n}'}], temperature=0.1, max_tokens=8192)[0m
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:349 - 

[92m08:38:14 - LiteLLM:DEBUG[0m: litellm_logging.py:475 - self.optional_params: {}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:349 - SYNC kwargs[caching]: False; litellm.cache: None; kwargs.get('cache')['no-cache']: False
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'vertex_ai/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'vertex_ai/gemini-2.5-flash', 'custom_llm_provider': 'vertex_ai'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'vertex_ai/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'vertex_ai/gemini-2.5-flash', 'custom_llm_provider': 'vertex_ai'}
[92m08:38:14 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:3263 - 
LiteLLM: Params passed to completion() {'model': 'gemini-2.5-flash', 'functions': None, 'function_call': None, 'temperature': 0.1, 'top_p': None, 'n': None, 'stream': None, 'stream_options': None, 'stop': None, 'max_tokens': 8192, 'max_completion_tokens': None, 'modalities': None, 'prediction': None, 'audio': None, 'presence_penalty': None, 'frequency_penalty': None, 'logit_bias': None, 'user': None, 'custom_llm_provider': 'gemini', 'response_format': None, 'seed': None, 'tools': None, 'tool_choice': None, 'max_retries': None, 'logprobs': None, 'top_logprobs': None, 'extra_headers': None, 'api_version': None, 'parallel_tool_calls': None, 'drop_params': None, 'allowed_openai_params': None, 'reasoning_effort': None, 'additional_drop_params': None, 'messages': [{'role': 'system', 'content': "Generate a human-readable summary of the following system using this format:\n\nGOAL: [Concise statement of system's primary goal]\nCOMPONENTS:\n- [Component Name]: [Type] - [Description]\nBINDINGS:\n- [From Component].[From Port] -> [To Component].[To Port]\nCONFIGURATION:\n- [Key]: [Value]"}, {'role': 'user', 'content': 'Generate the structured natural language summary for this system:\n\n{\n  "name": "validation_test_system",\n  "description": "A simple system designed to demonstrate compliance with all architectural and binding rules, including a source, a transformer, and a terminal store.",\n  "version": "1.0.0",\n  "components": [\n    {\n      "name": "data_generator",\n      "type": "Source",\n      "description": "Generates raw data records for processing.",\n      "inputs": [],\n      "outputs": [\n        {\n          "name": "output_data",\n          "schema_type": "object",\n          "description": "Raw data record.",\n          "required": true\n        }\n      ],\n      "config": {}\n    },\n    {\n      "name": "data_processor",\n      "type": "Transformer",\n      "description": "Processes and transforms incoming data records.",\n      "inputs": [\n        {\n          "name": "input_data",\n          "schema_type": "object",\n          "description": "Raw data record from generator.",\n          "required": true\n        }\n      ],\n      "outputs": [\n        {\n          "name": "processed_data",\n          "schema_type": "object",\n          "description": "Transformed data record.",\n          "required": true\n        }\n      ],\n      "config": {}\n    },\n    {\n      "name": "data_persister",\n      "type": "Store",\n      "description": "Persists processed data records into a database.",\n      "inputs": [\n        {\n          "name": "store_data",\n          "schema_type": "object",\n          "description": "Processed data record to be stored.",\n          "required": true\n        }\n      ],\n      "outputs": [],\n      "config": {}\n    }\n  ],\n  "bindings": [\n    {\n      "from_component": "data_generator",\n      "from_port": "output_data",\n      "to_component": "data_processor",\n      "to_port": "input_data"\n    },\n    {\n      "from_component": "data_processor",\n      "from_port": "processed_data",\n      "to_component": "data_persister",\n      "to_port": "store_data"\n    }\n  ],\n  "environment": "development"\n}'}], 'thinking': None, 'web_search_options': None}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:3266 - 
LiteLLM: Non-Default params passed to completion() {'temperature': 0.1, 'max_tokens': 8192}
[92m08:38:14 - LiteLLM:DEBUG[0m: litellm_logging.py:1623 - Logging Details LiteLLM-Success Call streaming complete
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:349 - Final returned optional params: {'temperature': 0.1, 'max_output_tokens': 8192}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'vertex_ai/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'vertex_ai/gemini-2.5-flash', 'custom_llm_provider': 'vertex_ai'}
[92m08:38:14 - LiteLLM:DEBUG[0m: litellm_logging.py:475 - self.optional_params: {'temperature': 0.1, 'max_tokens': 8192}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
[92m08:38:14 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:14 - LiteLLM:DEBUG[0m: litellm_logging.py:921 - [92m

POST Request Sent from LiteLLM:
curl -X POST \
https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=*****BZx8 \
-H 'Content-Type: application/json' \
-d '{'contents': [{'role': 'user', 'parts': [{'text': 'Generate the structured natural language summary for this system:\n\n{\n  "name": "validation_test_system",\n  "description": "A simple system designed to demonstrate compliance with all architectural and binding rules, including a source, a transformer, and a terminal store.",\n  "version": "1.0.0",\n  "components": [\n    {\n      "name": "data_generator",\n      "type": "Source",\n      "description": "Generates raw data records for processing.",\n      "inputs": [],\n      "outputs": [\n        {\n          "name": "output_data",\n          "schema_type": "object",\n          "description": "Raw data record.",\n          "required": true\n        }\n      ],\n      "config": {}\n    },\n    {\n      "name": "data_processor",\n      "type": "Transformer",\n      "description": "Processes and transforms incoming data records.",\n      "inputs": [\n        {\n          "name": "input_data",\n          "schema_type": "object",\n          "description": "Raw data record from generator.",\n          "required": true\n        }\n      ],\n      "outputs": [\n        {\n          "name": "processed_data",\n          "schema_type": "object",\n          "description": "Transformed data record.",\n          "required": true\n        }\n      ],\n      "config": {}\n    },\n    {\n      "name": "data_persister",\n      "type": "Store",\n      "description": "Persists processed data records into a database.",\n      "inputs": [\n        {\n          "name": "store_data",\n          "schema_type": "object",\n          "description": "Processed data record to be stored.",\n          "required": true\n        }\n      ],\n      "outputs": [],\n      "config": {}\n    }\n  ],\n  "bindings": [\n    {\n      "from_component": "data_generator",\n      "from_port": "output_data",\n      "to_component": "data_processor",\n      "to_port": "input_data"\n    },\n    {\n      "from_component": "data_processor",\n      "from_port": "processed_data",\n      "to_component": "data_persister",\n      "to_port": "store_data"\n    }\n  ],\n  "environment": "development"\n}'}]}], 'system_instruction': {'parts': [{'text': "Generate a human-readable summary of the following system using this format:\n\nGOAL: [Concise statement of system's primary goal]\nCOMPONENTS:\n- [Component Name]: [Type] - [Description]\nBINDINGS:\n- [From Component].[From Port] -> [To Component].[To Port]\nCONFIGURATION:\n- [Key]: [Value]"}]}, 'generationConfig': {'temperature': 0.1, 'max_output_tokens': 8192}}'
[0m

[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:349 - RAW RESPONSE:
{
  "candidates": [
    {
      "content": {
        "parts": [
          {
            "text": "GOAL: A simple system designed to demonstrate compliance with all architectural and binding rules, including a source, a transformer, and a terminal store.\n\nCOMPONENTS:\n- data_generator: Source - Generates raw data records for processing.\n- data_processor: Transformer - Processes and transforms incoming data records.\n- data_persister: Store - Persists processed data records into a database.\n\nBINDINGS:\n- data_generator.output_data -\u003e data_processor.input_data\n- data_processor.processed_data -\u003e data_persister.store_data\n\nCONFIGURATION:\n- No specific component configurations provided."
          }
        ],
        "role": "model"
      },
      "finishReason": "STOP",
      "index": 0
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 639,
    "candidatesTokenCount": 132,
    "totalTokenCount": 956,
    "promptTokensDetails": [
      {
        "modality": "TEXT",
        "tokenCount": 639
      }
    ],
    "thoughtsTokenCount": 185
  },
  "modelVersion": "gemini-2.5-flash",
  "responseId": "aCavaIPWMM3jz7IP1-DJqQQ"
}



[92m08:38:16 - LiteLLM:INFO[0m: utils.py:1262 - Wrapper: Completed Call, calling success_handler
[92m08:38:16 - LiteLLM:DEBUG[0m: cost_calculator.py:675 - selected model name for cost calculation: gemini/gemini-2.5-flash
[92m08:38:16 - LiteLLM:DEBUG[0m: litellm_logging.py:1594 - Logging Details LiteLLM-Success Call: Cache_hit=None
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:16 - LiteLLM:DEBUG[0m: cost_calculator.py:675 - selected model name for cost calculation: gemini/gemini-2.5-flash
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:16 - LiteLLM:DEBUG[0m: litellm_logging.py:1223 - response_cost: 0.0009842
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
[92m08:38:16 - LiteLLM:DEBUG[0m: litellm_logging.py:1223 - response_cost: 0.0009842
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'vertex_ai/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'vertex_ai/gemini-2.5-flash', 'custom_llm_provider': 'vertex_ai'}
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
[92m08:38:16 - LiteLLM:DEBUG[0m: litellm_logging.py:1623 - Logging Details LiteLLM-Success Call streaming complete
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'vertex_ai/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'vertex_ai/gemini-2.5-flash', 'custom_llm_provider': 'vertex_ai'}
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4622 - checking potential_model_names in litellm.model_cost: {'split_model': 'gemini-2.5-flash', 'combined_model_name': 'gemini/gemini-2.5-flash', 'stripped_model_name': 'gemini-2.5-flash', 'combined_stripped_model_name': 'gemini/gemini-2.5-flash', 'custom_llm_provider': 'gemini'}
[92m08:38:16 - LiteLLM:DEBUG[0m: utils.py:4927 - model_info: {'key': 'gemini/gemini-2.5-flash', 'max_tokens': 65535, 'max_input_tokens': 1048576, 'max_output_tokens': 65535, 'input_cost_per_token': 3e-07, 'cache_creation_input_token_cost': None, 'cache_read_input_token_cost': 7.5e-08, 'input_cost_per_character': None, 'input_cost_per_token_above_128k_tokens': None, 'input_cost_per_token_above_200k_tokens': None, 'input_cost_per_query': None, 'input_cost_per_second': None, 'input_cost_per_audio_token': 1e-06, 'input_cost_per_token_batches': None, 'output_cost_per_token_batches': None, 'output_cost_per_token': 2.5e-06, 'output_cost_per_audio_token': None, 'output_cost_per_character': None, 'output_cost_per_reasoning_token': 2.5e-06, 'output_cost_per_token_above_128k_tokens': None, 'output_cost_per_character_above_128k_tokens': None, 'output_cost_per_token_above_200k_tokens': None, 'output_cost_per_second': None, 'output_cost_per_image': None, 'output_vector_size': None, 'citation_cost_per_token': None, 'litellm_provider': 'gemini', 'mode': 'chat', 'supports_system_messages': True, 'supports_response_schema': True, 'supports_vision': True, 'supports_function_calling': True, 'supports_tool_choice': True, 'supports_assistant_prefill': None, 'supports_prompt_caching': True, 'supports_audio_input': None, 'supports_audio_output': False, 'supports_pdf_input': True, 'supports_embedding_image_input': None, 'supports_native_streaming': None, 'supports_web_search': True, 'supports_url_context': True, 'supports_reasoning': True, 'supports_computer_use': None, 'search_context_cost_per_query': None, 'tpm': 8000000, 'rpm': 100000}
Overriding of current MeterProvider is not allowed
{"timestamp": "2025-08-27T08:38:16.027511", "level": "INFO", "logger_name": "port_auto_generator", "message": "ComponentPortAutoGenerator initialized", "component": "ComponentPortAutoGenerator", "operation": "init", "tags": {"template_count": 14}}
{"timestamp": "2025-08-27T08:38:16.027763", "level": "INFO", "logger_name": "IntegrationValidationGate", "message": "Validation threshold set to 90.0%"}
{"timestamp": "2025-08-27T08:38:16.027892", "level": "INFO", "logger_name": "IntegrationValidationGate", "message": "Validation threshold set to 90.0%"}
INFO:IntegrationValidationGate:Validation threshold set to 90.0%
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:autocoder_cc.llm_providers.unified_llm_provider:Fallback ENABLED - will try multiple models on failure
INFO:autocoder_cc.llm_providers.unified_llm_provider:Unified LLM Provider initialized with models: ['gemini_2_5_flash', 'openai_gpt4o_mini', 'claude_sonnet_4']
{"timestamp": "2025-08-27T08:38:16.034801", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator initialized - no more hanging!", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator initialized - no more hanging!
{"timestamp": "2025-08-27T08:38:16.035871", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator ready - all modules loaded", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator ready - all modules loaded
{"timestamp": "2025-08-27T08:38:16.035980", "level": "INFO", "logger_name": "SelfHealingSystem", "message": "LLM component generator initialized for healing"}
INFO:SelfHealingSystem:LLM component generator initialized for healing
INFO:autocoder_cc.llm_providers.unified_llm_provider:Fallback ENABLED - will try multiple models on failure
INFO:autocoder_cc.llm_providers.unified_llm_provider:Unified LLM Provider initialized with models: ['gemini_2_5_flash', 'openai_gpt4o_mini', 'claude_sonnet_4']
{"timestamp": "2025-08-27T08:38:16.036974", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator initialized - no more hanging!", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator initialized - no more hanging!
{"timestamp": "2025-08-27T08:38:16.037174", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator ready - all modules loaded", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator ready - all modules loaded
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:autocoder_cc.llm_providers.unified_llm_provider:Fallback ENABLED - will try multiple models on failure
INFO:autocoder_cc.llm_providers.unified_llm_provider:Unified LLM Provider initialized with models: ['gemini_2_5_flash', 'openai_gpt4o_mini', 'claude_sonnet_4']
{"timestamp": "2025-08-27T08:38:16.044242", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator initialized - no more hanging!", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator initialized - no more hanging!
{"timestamp": "2025-08-27T08:38:16.044458", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator ready - all modules loaded", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator ready - all modules loaded
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
{"timestamp": "2025-08-27T08:38:16.051436", "level": "INFO", "logger_name": "store_generator", "message": "StoreGenerator initialized", "component": "StoreGenerator", "operation": "init"}
INFO:store_generator:StoreGenerator initialized
INFO:autocoder_cc.blueprint_language.architectural_templates.template_selector:✅ TemplateSelector initialized with architectural templates
{"timestamp": "2025-08-27T08:38:16.051600", "level": "INFO", "logger_name": "component_logic_generator", "message": "ComponentLogicGenerator initialized with observability stack and architectural templates", "component": "ComponentLogicGenerator", "operation": "init", "tags": {"output_dir": "/tmp/tmpcv_9bqo7/scaffolds"}}
INFO:component_logic_generator:ComponentLogicGenerator initialized with observability stack and architectural templates
{"timestamp": "2025-08-27T08:38:16.051692", "level": "INFO", "logger_name": "ComponentLogicGenerator", "message": "✅ ComponentLogicGenerator initialized with architectural templates"}
INFO:ComponentLogicGenerator:✅ ComponentLogicGenerator initialized with architectural templates
{"timestamp": "2025-08-27T08:38:16.051782", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Property Test Generator initialized with fail-hard validation"}
INFO:PropertyTestGenerator:✅ Property Test Generator initialized with fail-hard validation
{"timestamp": "2025-08-27T08:38:16.052602", "level": "INFO", "logger_name": "system_generator", "message": "SystemGenerator initialized with observability stack", "component": "SystemGenerator", "operation": "init", "tags": {"output_dir": "/tmp/tmpcv_9bqo7", "verbose_logging": true, "timeout": null}}
INFO:system_generator:SystemGenerator initialized with observability stack
{"timestamp": "2025-08-27T08:38:16.052911", "level": "INFO", "logger_name": "port_auto_generator", "message": "ComponentPortAutoGenerator initialized", "component": "ComponentPortAutoGenerator", "operation": "init", "tags": {"template_count": 14}}
INFO:port_auto_generator:ComponentPortAutoGenerator initialized
{"timestamp": "2025-08-27T08:38:16.060200", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.system_blueprint_parser", "message": "Blueprint parsing attempt 1/4"}
INFO:autocoder_cc.blueprint_language.system_blueprint_parser:Blueprint parsing attempt 1/4
{"timestamp": "2025-08-27T08:38:16.060405", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Starting blueprint healing process (phase: structural)"}
INFO:autocoder_cc.healing.blueprint_healer:Starting blueprint healing process (phase: structural)
{"timestamp": "2025-08-27T08:38:16.060500", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Analyzing 3 components for missing bindings"}
INFO:autocoder_cc.healing.blueprint_healer:Analyzing 3 components for missing bindings
{"timestamp": "2025-08-27T08:38:16.060590", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Generated binding: data_generator.output → data_processor.input"}
INFO:autocoder_cc.healing.blueprint_healer:Generated binding: data_generator.output → data_processor.input
{"timestamp": "2025-08-27T08:38:16.060699", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Generated binding: data_processor.output → data_persister.input"}
INFO:autocoder_cc.healing.blueprint_healer:Generated binding: data_processor.output → data_persister.input
{"timestamp": "2025-08-27T08:38:16.060778", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Generated 2 missing bindings"}
INFO:autocoder_cc.healing.blueprint_healer:Generated 2 missing bindings
{"timestamp": "2025-08-27T08:38:16.060871", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Fixed component type casing: Source -> Source"}
DEBUG:autocoder_cc.healing.blueprint_healer:Fixed component type casing: Source -> Source
{"timestamp": "2025-08-27T08:38:16.060944", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Fixed component type casing: Transformer -> Transformer"}
DEBUG:autocoder_cc.healing.blueprint_healer:Fixed component type casing: Transformer -> Transformer
{"timestamp": "2025-08-27T08:38:16.061015", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Fixed component type casing: Store -> Store"}
DEBUG:autocoder_cc.healing.blueprint_healer:Fixed component type casing: Store -> Store
{"timestamp": "2025-08-27T08:38:16.061087", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Blueprint healing completed with 1 operations: Generated 2 missing bindings"}
INFO:autocoder_cc.healing.blueprint_healer:Blueprint healing completed with 1 operations: Generated 2 missing bindings
{"timestamp": "2025-08-27T08:38:16.061299", "level": "INFO", "logger_name": "VersionedSchemaManager", "message": "✅ Schema version validation passed: 1.0.0"}
INFO:VersionedSchemaManager:✅ Schema version validation passed: 1.0.0
{"timestamp": "2025-08-27T08:38:16.061485", "level": "INFO", "logger_name": "port_auto_generator", "message": "Starting port auto-generation", "component": "ComponentPortAutoGenerator", "operation": "auto_generate_ports", "tags": {"component_count": 3}}
INFO:port_auto_generator:Starting port auto-generation
{"timestamp": "2025-08-27T08:38:16.061590", "level": "DEBUG", "logger_name": "port_auto_generator", "message": "Added required output port: output", "component": "ComponentPortAutoGenerator", "operation": "port_added", "tags": {"component": "data_generator", "port_type": "output", "port_name": "output"}}
DEBUG:port_auto_generator:Added required output port: output
{"timestamp": "2025-08-27T08:38:16.061682", "level": "DEBUG", "logger_name": "port_auto_generator", "message": "Added required input port: input", "component": "ComponentPortAutoGenerator", "operation": "port_added", "tags": {"component": "data_processor", "port_type": "input", "port_name": "input"}}
DEBUG:port_auto_generator:Added required input port: input
{"timestamp": "2025-08-27T08:38:16.061769", "level": "DEBUG", "logger_name": "port_auto_generator", "message": "Added required output port: output", "component": "ComponentPortAutoGenerator", "operation": "port_added", "tags": {"component": "data_processor", "port_type": "output", "port_name": "output"}}
DEBUG:port_auto_generator:Added required output port: output
{"timestamp": "2025-08-27T08:38:16.061854", "level": "DEBUG", "logger_name": "port_auto_generator", "message": "Added required input port: input", "component": "ComponentPortAutoGenerator", "operation": "port_added", "tags": {"component": "data_persister", "port_type": "input", "port_name": "input"}}
DEBUG:port_auto_generator:Added required input port: input
{"timestamp": "2025-08-27T08:38:16.061932", "level": "INFO", "logger_name": "port_auto_generator", "message": "Port auto-generation completed", "component": "ComponentPortAutoGenerator", "operation": "ports_generated", "tags": {"components_modified": 3}}
INFO:port_auto_generator:Port auto-generation completed
{"timestamp": "2025-08-27T08:38:16.062124", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.system_blueprint_parser", "message": "Applying schema healing for attempt 1"}
INFO:autocoder_cc.blueprint_language.system_blueprint_parser:Applying schema healing for attempt 1
{"timestamp": "2025-08-27T08:38:16.062298", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Starting blueprint healing process (phase: schema)"}
INFO:autocoder_cc.healing.blueprint_healer:Starting blueprint healing process (phase: schema)
{"timestamp": "2025-08-27T08:38:16.062389", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'from': 'data_generator.output_data', 'to': 'data_processor.input_data', 'error_handling': {'strategy': 'retry', 'retry_count': 3, 'timeout_ms': 5000}, 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'from': 'data_generator.output_data', 'to': 'data_processor.input_data', 'error_handling': {'strategy': 'retry', 'retry_count': 3, 'timeout_ms': 5000}, 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}}
{"timestamp": "2025-08-27T08:38:16.062465", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_generator.output_data, To part: data_processor.input_data"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_generator.output_data, To part: data_processor.input_data
{"timestamp": "2025-08-27T08:38:16.062543", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'from': 'data_processor.processed_data', 'to': 'data_persister.store_data', 'error_handling': {'strategy': 'retry', 'retry_count': 3, 'timeout_ms': 5000}, 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'from': 'data_processor.processed_data', 'to': 'data_persister.store_data', 'error_handling': {'strategy': 'retry', 'retry_count': 3, 'timeout_ms': 5000}, 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}}
{"timestamp": "2025-08-27T08:38:16.062629", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_processor.processed_data, To part: data_persister.store_data"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_processor.processed_data, To part: data_persister.store_data
{"timestamp": "2025-08-27T08:38:16.062707", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'from_component': 'data_generator', 'from_port': 'output', 'to_components': ['data_processor'], 'to_ports': ['input'], 'description': 'Auto-generated: data_generator data flow to data_processor', 'generated_by': 'healer_initial', '_uses_alt_format': True}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'from_component': 'data_generator', 'from_port': 'output', 'to_components': ['data_processor'], 'to_ports': ['input'], 'description': 'Auto-generated: data_generator data flow to data_processor', 'generated_by': 'healer_initial', '_uses_alt_format': True}
{"timestamp": "2025-08-27T08:38:16.062800", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_generator.output, To part: data_processor.input"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_generator.output, To part: data_processor.input
{"timestamp": "2025-08-27T08:38:16.062873", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Schema mismatch detected: data_generator.output (common_object_schema) -> data_processor.input (ItemSchema)"}
INFO:autocoder_cc.healing.blueprint_healer:Schema mismatch detected: data_generator.output (common_object_schema) -> data_processor.input (ItemSchema)
{"timestamp": "2025-08-27T08:38:16.062941", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Added transformation to handle schema mismatch: common_object_schema -> ItemSchema"}
INFO:autocoder_cc.healing.blueprint_healer:Added transformation to handle schema mismatch: common_object_schema -> ItemSchema
{"timestamp": "2025-08-27T08:38:16.063012", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'from_component': 'data_processor', 'from_port': 'output', 'to_components': ['data_persister'], 'to_ports': ['input'], 'description': 'Auto-generated: data_processor processed data to data_persister', 'generated_by': 'healer_initial', '_uses_alt_format': True}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'from_component': 'data_processor', 'from_port': 'output', 'to_components': ['data_persister'], 'to_ports': ['input'], 'description': 'Auto-generated: data_processor processed data to data_persister', 'generated_by': 'healer_initial', '_uses_alt_format': True}
{"timestamp": "2025-08-27T08:38:16.063066", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_processor.output, To part: data_persister.input"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_processor.output, To part: data_persister.input
{"timestamp": "2025-08-27T08:38:16.063133", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Applied 1 schema compatibility fixes"}
INFO:autocoder_cc.healing.blueprint_healer:Applied 1 schema compatibility fixes
{"timestamp": "2025-08-27T08:38:16.063201", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Blueprint healing completed - no issues found"}
INFO:autocoder_cc.healing.blueprint_healer:Blueprint healing completed - no issues found
INFO:autocoder_cc.blueprint_language.architectural_validator:Starting architectural validation for system: validation_test_system
INFO:autocoder_cc.blueprint_language.architectural_validator:Connectivity validation complete: 0 orphaned components found
INFO:autocoder_cc.blueprint_language.architectural_validator:Architectural validation completed: 0 errors, 0 warnings
INFO:VerboseAutocoder:▶️  Generate System: validation_test_system
DEBUG:VerboseAutocoder:   📋 system_name: validation_test_system
DEBUG:VerboseAutocoder:   📋 component_count: 3
DEBUG:VerboseAutocoder:   📋 binding_count: 4
INFO:VerboseAutocoder:🚀 Generating system: validation_test_system
INFO:VerboseAutocoder:📋 Blueprint details:
INFO:VerboseAutocoder:   - Components: 3
INFO:VerboseAutocoder:   - Bindings: 4
INFO:VerboseAutocoder:   - Version: 1.0.0
INFO:VerboseAutocoder:  ▶️  Pre-Generation Validation
{"timestamp": "2025-08-27T08:38:16.064413", "level": "INFO", "logger_name": "ValidationOrchestrator", "message": "✅ Pre-generation validation passed"}
INFO:ValidationOrchestrator:✅ Pre-generation validation passed
INFO:VerboseAutocoder:    ✅ pre_generation: PASSED
DEBUG:VerboseAutocoder:       📊 success: True
ERROR:VerboseAutocoder:       🚨 Errors (0):
DEBUG:VerboseAutocoder:       📊 total_errors: 0
INFO:VerboseAutocoder:  ✅ Pre-Generation Validation (⏱️ 0.00s)
INFO:VerboseAutocoder:  ▶️  Allocate System Ports
INFO:VerboseAutocoder:✅ Allocated 0 ports successfully
INFO:VerboseAutocoder:  ✅ Allocate System Ports (⏱️ 0.00s)
INFO:VerboseAutocoder:  ▶️  Generate System Scaffold
{"timestamp": "2025-08-27T08:38:16.065468", "level": "INFO", "logger_name": "autocoder_cc.core.port_registry", "message": "PortRegistry initialized: range 8000-65535, reserved 10 ports"}
INFO:autocoder_cc.core.port_registry:PortRegistry initialized: range 8000-65535, reserved 10 ports
{"timestamp": "2025-08-27T08:38:16.065546", "level": "INFO", "logger_name": "autocoder_cc.core.port_registry", "message": "Global PortRegistry instance created"}
INFO:autocoder_cc.core.port_registry:Global PortRegistry instance created
{"timestamp": "2025-08-27T08:38:16.065633", "level": "INFO", "logger_name": "autocoder_cc.core.port_registry", "message": "Allocated port 53831 for metrics (None)"}
INFO:autocoder_cc.core.port_registry:Allocated port 53831 for metrics (None)
WARNING:autocoder_cc.blueprint_language.database_config_manager:Removing legacy database field: storage_type
WARNING:autocoder_cc.blueprint_language.database_config_manager:Removing legacy database field: storage_type
INFO:VerboseAutocoder:    📄 Generated: main.py
INFO:VerboseAutocoder:       📏 Size: 10336 chars, 263 lines
DEBUG:VerboseAutocoder:       🏷️  component_count: 3
DEBUG:VerboseAutocoder:       🏷️  file_type: system_entry_point
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: #!/usr/bin/env python3
DEBUG:VerboseAutocoder:            2: """
DEBUG:VerboseAutocoder:            3: Generated main.py for validation_test_system
DEBUG:VerboseAutocoder:            4: Using dynamic component loading - NO HARDCODED IMPORTS
DEBUG:VerboseAutocoder:            5: Following Enterprise Roadmap v3 requirements
DEBUG:VerboseAutocoder:            6: """
DEBUG:VerboseAutocoder:            7: import asyncio
DEBUG:VerboseAutocoder:            8: import logging
DEBUG:VerboseAutocoder:            9: from datetime import datetime
DEBUG:VerboseAutocoder:           10: from pathlib import Path
DEBUG:VerboseAutocoder:           11: from contextlib import asynccontextmanager
DEBUG:VerboseAutocoder:           12: from typing import Dict, Any, Optional
DEBUG:VerboseAutocoder:           13: import os
DEBUG:VerboseAutocoder:           14: import yaml
DEBUG:VerboseAutocoder:           15: import importlib.util
DEBUG:VerboseAutocoder:           16: 
DEBUG:VerboseAutocoder:           17: from fastapi import FastAPI, HTTPException, Request
DEBUG:VerboseAutocoder:           18: from pydantic import BaseModel
DEBUG:VerboseAutocoder:           19: import anyio
DEBUG:VerboseAutocoder:           20: 
DEBUG:VerboseAutocoder:          ... (244 more lines)
INFO:VerboseAutocoder:    📄 Generated: config/system_config.yaml
INFO:VerboseAutocoder:       📏 Size: 1168 chars, 56 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: system_configuration
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: system:
DEBUG:VerboseAutocoder:            2:   name: validation_test_system
DEBUG:VerboseAutocoder:            3:   version: 1.0.0
DEBUG:VerboseAutocoder:            4:   environment: development
DEBUG:VerboseAutocoder:            5: database:
DEBUG:VerboseAutocoder:            6:   default:
DEBUG:VerboseAutocoder:            7:     database_type: postgresql
DEBUG:VerboseAutocoder:            8:     db_host: localhost
DEBUG:VerboseAutocoder:            9:     db_port: 5432
DEBUG:VerboseAutocoder:           10:     db_name: dev_db
DEBUG:VerboseAutocoder:           11:     db_user: dev_user
DEBUG:VerboseAutocoder:           12:     db_password: dev_password
DEBUG:VerboseAutocoder:           13:     min_connections: 1
DEBUG:VerboseAutocoder:           14:     max_connections: 10
DEBUG:VerboseAutocoder:           15:     connection_timeout: 30
DEBUG:VerboseAutocoder:           16:     ssl_mode: disable
DEBUG:VerboseAutocoder:           17:     charset: utf8mb4
DEBUG:VerboseAutocoder:           18:   environment: development
DEBUG:VerboseAutocoder:           19:   components:
DEBUG:VerboseAutocoder:           20:     data_persister:
DEBUG:VerboseAutocoder:          ... (37 more lines)
INFO:VerboseAutocoder:    📄 Generated: requirements.txt
INFO:VerboseAutocoder:       📏 Size: 226 chars, 11 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: python_dependencies
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: anyio>=3.7.0
DEBUG:VerboseAutocoder:            2: asyncio-extras>=1.3.0
DEBUG:VerboseAutocoder:            3: asyncpg>=0.28.0
DEBUG:VerboseAutocoder:            4: databases>=0.7.0
DEBUG:VerboseAutocoder:            5: fastapi>=0.100.0
DEBUG:VerboseAutocoder:            6: httpx>=0.24.0
DEBUG:VerboseAutocoder:            7: prometheus-client>=0.17.0
DEBUG:VerboseAutocoder:            8: psycopg2-binary>=2.9.0
DEBUG:VerboseAutocoder:            9: pydantic-settings>=2.0.0
DEBUG:VerboseAutocoder:           10: pydantic>=2.0.0
DEBUG:VerboseAutocoder:           11: pyyaml>=6.0
DEBUG:VerboseAutocoder:           12: uvicorn[standard]>=0.22.0
INFO:VerboseAutocoder:    📄 Generated: Dockerfile
INFO:VerboseAutocoder:       📏 Size: 929 chars, 34 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: container_configuration
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: # Generated Production Dockerfile for validation_test_system
DEBUG:VerboseAutocoder:            2: FROM python:3.11-slim
DEBUG:VerboseAutocoder:            3: 
DEBUG:VerboseAutocoder:            4: # Set working directory
DEBUG:VerboseAutocoder:            5: WORKDIR /app
DEBUG:VerboseAutocoder:            6: 
DEBUG:VerboseAutocoder:            7: # Install system dependencies for production
DEBUG:VerboseAutocoder:            8: RUN apt-get update && apt-get install -y \
DEBUG:VerboseAutocoder:            9:     curl \
DEBUG:VerboseAutocoder:           10:     && rm -rf /var/lib/apt/lists/*
DEBUG:VerboseAutocoder:           11: 
DEBUG:VerboseAutocoder:           12: # Copy requirements and install dependencies
DEBUG:VerboseAutocoder:           13: COPY requirements.txt .
DEBUG:VerboseAutocoder:           14: RUN pip install --no-cache-dir -r requirements.txt
DEBUG:VerboseAutocoder:           15: 
DEBUG:VerboseAutocoder:           16: # Copy application code
DEBUG:VerboseAutocoder:           17: COPY . .
DEBUG:VerboseAutocoder:           18: 
DEBUG:VerboseAutocoder:           19: # Create config and logs directories
DEBUG:VerboseAutocoder:           20: RUN mkdir -p config logs
DEBUG:VerboseAutocoder:          ... (15 more lines)
INFO:VerboseAutocoder:  ✅ Generate System Scaffold (⏱️ 0.01s)
INFO:VerboseAutocoder:  ▶️  Generate Database Schema Artifacts
{"timestamp": "2025-08-27T08:38:16.078185", "level": "INFO", "logger_name": "VersionedSchemaManager", "message": "✅ Generated 2 database schema files"}
INFO:VersionedSchemaManager:✅ Generated 2 database schema files
INFO:VerboseAutocoder:✅ Generated 2 schema artifacts
INFO:VerboseAutocoder:    📄 Generated: database/schema_v1_0_0.sql
INFO:VerboseAutocoder:       📏 Size: 616 chars, 18 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: database_schema
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: -- Generated Database Schema
DEBUG:VerboseAutocoder:            2: -- Schema Version: 1.0.0
DEBUG:VerboseAutocoder:            3: -- Generated: 2025-07-15
DEBUG:VerboseAutocoder:            4: 
DEBUG:VerboseAutocoder:            5: -- Enable UUID extension
DEBUG:VerboseAutocoder:            6: CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
DEBUG:VerboseAutocoder:            7: 
DEBUG:VerboseAutocoder:            8: -- Table for data_persister component
DEBUG:VerboseAutocoder:            9: CREATE TABLE data_persister_data (
DEBUG:VerboseAutocoder:           10:     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
DEBUG:VerboseAutocoder:           11:     data JSONB NOT NULL,
DEBUG:VerboseAutocoder:           12:     created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
DEBUG:VerboseAutocoder:           13:     updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
DEBUG:VerboseAutocoder:           14: );
DEBUG:VerboseAutocoder:           15: 
DEBUG:VerboseAutocoder:           16: -- Index for efficient querying
DEBUG:VerboseAutocoder:           17: CREATE INDEX idx_data_persister_data_created_at ON data_persister_data (created_at);
DEBUG:VerboseAutocoder:           18: CREATE INDEX idx_data_persister_data_data_gin ON data_persister_data USING gin(data);
DEBUG:VerboseAutocoder:           19: 
INFO:VerboseAutocoder:    📄 Generated: database/migration_metadata.json
INFO:VerboseAutocoder:       📏 Size: 163 chars, 7 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: database_schema
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: {
DEBUG:VerboseAutocoder:            2:   "current_version": "1.0.0",
DEBUG:VerboseAutocoder:            3:   "generated_at": "2025-07-15T16:00:00Z",
DEBUG:VerboseAutocoder:            4:   "blueprint_hash": "f72ba0eaa292b312",
DEBUG:VerboseAutocoder:            5:   "schema_files": [
DEBUG:VerboseAutocoder:            6:     "schema_v1_0_0.sql"
DEBUG:VerboseAutocoder:            7:   ]
DEBUG:VerboseAutocoder:            8: }
INFO:VerboseAutocoder:  ✅ Generate Database Schema Artifacts (⏱️ 0.00s)
INFO:VerboseAutocoder:  ▶️  Generate Service Communication Configuration
INFO:autocoder_cc.llm_providers.unified_llm_provider:Attempt 1: Trying gemini/gemini-2.5-flash
{"timestamp": "2025-08-27T08:38:16.081033", "level": "INFO", "logger_name": "autocoder_cc.core.timeout_manager", "message": "TimeoutManager initialized with config: TimeoutConfig(health_check=inf, llm_generation=inf, component_generation=inf, system_validation=inf, blueprint_processing=inf, resource_allocation=inf)"}
INFO:autocoder_cc.core.timeout_manager:TimeoutManager initialized with config: TimeoutConfig(health_check=inf, llm_generation=inf, component_generation=inf, system_validation=inf, blueprint_processing=inf, resource_allocation=inf)
{"timestamp": "2025-08-27T08:38:16.081140", "level": "INFO", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Global TimeoutManager instance created"}
INFO:autocoder_cc.core.timeout_manager:Global TimeoutManager instance created
{"timestamp": "2025-08-27T08:38:16.081228", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Created timeout context: llm_call_gemini_2_5_flash_1756309096081 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Created timeout context: llm_call_gemini_2_5_flash_1756309096081 (llm_generation, 3600s)
{"timestamp": "2025-08-27T08:38:16.081317", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Starting timed operation: llm_call_gemini_2_5_flash_1756309096081 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Starting timed operation: llm_call_gemini_2_5_flash_1756309096081 (llm_generation, 3600s)
[92m08:38:16 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
INFO:LiteLLM:
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
{"timestamp": "2025-08-27T08:38:22.962417", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed timed operation: llm_call_gemini_2_5_flash_1756309096081 in 6.88s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed timed operation: llm_call_gemini_2_5_flash_1756309096081 in 6.88s
{"timestamp": "2025-08-27T08:38:22.962573", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed operation: llm_call_gemini_2_5_flash_1756309096081 in 6.88s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed operation: llm_call_gemini_2_5_flash_1756309096081 in 6.88s
WARNING:autocoder_cc.llm_providers.unified_llm_provider:❌ Error with gemini/gemini-2.5-flash: LLM returned empty content (None) from gemini/gemini-2.5-flash
INFO:autocoder_cc.llm_providers.unified_llm_provider:Attempt 2: Trying gpt-4o-mini
{"timestamp": "2025-08-27T08:38:23.964582", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Created timeout context: llm_call_openai_gpt4o_mini_1756309103964 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Created timeout context: llm_call_openai_gpt4o_mini_1756309103964 (llm_generation, 3600s)
{"timestamp": "2025-08-27T08:38:23.964688", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Starting timed operation: llm_call_openai_gpt4o_mini_1756309103964 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Starting timed operation: llm_call_openai_gpt4o_mini_1756309103964 (llm_generation, 3600s)
[92m08:38:23 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gpt-4o-mini; provider = openai
INFO:LiteLLM:
LiteLLM completion() model= gpt-4o-mini; provider = openai
{"timestamp": "2025-08-27T08:38:25.463552", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed timed operation: llm_call_openai_gpt4o_mini_1756309103964 in 1.50s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed timed operation: llm_call_openai_gpt4o_mini_1756309103964 in 1.50s
{"timestamp": "2025-08-27T08:38:25.464379", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed operation: llm_call_openai_gpt4o_mini_1756309103964 in 1.50s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed operation: llm_call_openai_gpt4o_mini_1756309103964 in 1.50s
INFO:autocoder_cc.llm_providers.unified_llm_provider:✅ Success with gpt-4o-mini in 9.38s
{"timestamp": "2025-08-27T08:38:25.465485", "level": "INFO", "logger_name": "system_generator", "message": "Messaging type selected using LLM intelligence", "component": "SystemGenerator", "operation": "_determine_messaging_type", "tags": {"selected_type": "rabbitmq", "component_count": 3, "method": "llm_intelligent"}}
INFO:system_generator:Messaging type selected using LLM intelligence
INFO:VerboseAutocoder:✅ Generated service communication configuration
INFO:VerboseAutocoder:    📄 Generated: config/messaging_config.yaml
INFO:VerboseAutocoder:       📏 Size: 2845 chars, 100 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: messaging_configuration
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: messaging:
DEBUG:VerboseAutocoder:            2:   connection:
DEBUG:VerboseAutocoder:            3:     connection_url: amqp://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST:localhost}:${RABBITMQ_PORT:5672}/
DEBUG:VerboseAutocoder:            4:     exchange: ${RABBITMQ_EXCHANGE:autocoder_exchange}
DEBUG:VerboseAutocoder:            5:     host: ${RABBITMQ_HOST:localhost}
DEBUG:VerboseAutocoder:            6:     password: ${RABBITMQ_PASSWORD}
DEBUG:VerboseAutocoder:            7:     port: ${RABBITMQ_PORT:5672}
DEBUG:VerboseAutocoder:            8:     username: ${RABBITMQ_USERNAME}
DEBUG:VerboseAutocoder:            9:     virtual_host: ${RABBITMQ_VHOST:/}
DEBUG:VerboseAutocoder:           10:   queues:
DEBUG:VerboseAutocoder:           11:     data_generator_input:
DEBUG:VerboseAutocoder:           12:       auto_delete: false
DEBUG:VerboseAutocoder:           13:       durable: true
DEBUG:VerboseAutocoder:           14:       max_length: 10000
DEBUG:VerboseAutocoder:           15:       message_ttl: 3600000
DEBUG:VerboseAutocoder:           16:       routing_key: data_generator.input
DEBUG:VerboseAutocoder:           17:     data_generator_output:
DEBUG:VerboseAutocoder:           18:       auto_delete: false
DEBUG:VerboseAutocoder:           19:       durable: true
DEBUG:VerboseAutocoder:           20:       max_length: 10000
DEBUG:VerboseAutocoder:          ... (81 more lines)
INFO:VerboseAutocoder:  ✅ Generate Service Communication Configuration (⏱️ 9.39s)
INFO:VerboseAutocoder:  ▶️  Generate Shared Observability Module
INFO:VerboseAutocoder:    📄 Generated: observability.py
INFO:VerboseAutocoder:       📏 Size: 14302 chars, 372 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: shared_module
DEBUG:VerboseAutocoder:       🏷️  component_count: 3
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: #!/usr/bin/env python3
DEBUG:VerboseAutocoder:            2: """
DEBUG:VerboseAutocoder:            3: Shared Observability Module for validation_test_system
DEBUG:VerboseAutocoder:            4: ============================================
DEBUG:VerboseAutocoder:            5: 
DEBUG:VerboseAutocoder:            6: Generated by ObservabilityGenerator on 2025-08-27 08:38:25
DEBUG:VerboseAutocoder:            7: 
DEBUG:VerboseAutocoder:            8: This module contains all observability infrastructure shared across components:
DEBUG:VerboseAutocoder:            9: - StandaloneMetricsCollector: Metrics collection and reporting
DEBUG:VerboseAutocoder:           10: - StandaloneTracer: Distributed tracing support  
DEBUG:VerboseAutocoder:           11: - StandaloneSpan: Span implementation for tracing
DEBUG:VerboseAutocoder:           12: - ComponentStatus: Component state tracking
DEBUG:VerboseAutocoder:           13: - ComposedComponent: Base class for all components
DEBUG:VerboseAutocoder:           14: - SpanStatus: OpenTelemetry-compatible span status codes
DEBUG:VerboseAutocoder:           15: 
DEBUG:VerboseAutocoder:           16: Usage:
DEBUG:VerboseAutocoder:           17:     from observability import ComposedComponent, SpanStatus
DEBUG:VerboseAutocoder:           18:     
DEBUG:VerboseAutocoder:           19:     class MyComponent(ComposedComponent):
DEBUG:VerboseAutocoder:           20:         def __init__(self, name: str, config: Dict[str, Any] = None):
DEBUG:VerboseAutocoder:          ... (353 more lines)
INFO:VerboseAutocoder:✅ Generated shared observability module: /tmp/tmpcv_9bqo7/scaffolds/validation_test_system/components/observability.py
INFO:VerboseAutocoder:📏 Observability module: 14302 chars, 372 lines
INFO:VerboseAutocoder:  ✅ Generate Shared Observability Module (⏱️ 0.00s)
INFO:VerboseAutocoder:  ▶️  Generate Communication Framework
INFO:VerboseAutocoder:    📄 Generated: communication.py
INFO:VerboseAutocoder:       📏 Size: 14665 chars, 386 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: communication_framework
DEBUG:VerboseAutocoder:       🏷️  bindings_count: 4
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: #!/usr/bin/env python3
DEBUG:VerboseAutocoder:            2: """
DEBUG:VerboseAutocoder:            3: Component Communication Framework for validation_test_system
DEBUG:VerboseAutocoder:            4: ==================================================
DEBUG:VerboseAutocoder:            5: 
DEBUG:VerboseAutocoder:            6: Generated by ComponentCommunicationGenerator on 2025-08-27 08:38:25
DEBUG:VerboseAutocoder:            7: 
DEBUG:VerboseAutocoder:            8: This module provides the communication infrastructure for real inter-component
DEBUG:VerboseAutocoder:            9: message passing based on blueprint bindings.
DEBUG:VerboseAutocoder:           10: 
DEBUG:VerboseAutocoder:           11: Classes:
DEBUG:VerboseAutocoder:           12: - ComponentRegistry: Component discovery and registration
DEBUG:VerboseAutocoder:           13: - ComponentCommunicator: Message routing and delivery  
DEBUG:VerboseAutocoder:           14: - CommunicationConfig: Routing configuration from blueprint
DEBUG:VerboseAutocoder:           15: - MessageEnvelope: Structured message wrapper
DEBUG:VerboseAutocoder:           16: 
DEBUG:VerboseAutocoder:           17: Usage:
DEBUG:VerboseAutocoder:           18:     from communication import ComponentRegistry, ComponentCommunicator
DEBUG:VerboseAutocoder:           19:     
DEBUG:VerboseAutocoder:           20:     # In component initialization
DEBUG:VerboseAutocoder:          ... (367 more lines)
INFO:VerboseAutocoder:✅ Generated communication framework: /tmp/tmpcv_9bqo7/scaffolds/validation_test_system/components/communication.py
INFO:VerboseAutocoder:📏 Communication module: 14665 chars, 386 lines
INFO:VerboseAutocoder:🔗 Configured 4 component bindings for runtime routing
INFO:VerboseAutocoder:  ✅ Generate Communication Framework (⏱️ 0.00s)
INFO:VerboseAutocoder:  ▶️  Generate Component Implementations with Self-Healing
{"timestamp": "2025-08-27T08:38:25.480949", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "🚀 Starting integrated system generation with healing"}
INFO:HealingIntegratedGenerator:🚀 Starting integrated system generation with healing
{"timestamp": "2025-08-27T08:38:25.481081", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "📋 Parsing system blueprint..."}
INFO:HealingIntegratedGenerator:📋 Parsing system blueprint...
{"timestamp": "2025-08-27T08:38:25.488988", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.system_blueprint_parser", "message": "Blueprint parsing attempt 1/4"}
INFO:autocoder_cc.blueprint_language.system_blueprint_parser:Blueprint parsing attempt 1/4
{"timestamp": "2025-08-27T08:38:25.489234", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Starting blueprint healing process (phase: structural)"}
INFO:autocoder_cc.healing.blueprint_healer:Starting blueprint healing process (phase: structural)
{"timestamp": "2025-08-27T08:38:25.489352", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Analyzing 3 components for missing bindings"}
INFO:autocoder_cc.healing.blueprint_healer:Analyzing 3 components for missing bindings
{"timestamp": "2025-08-27T08:38:25.489455", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Generated 0 missing bindings"}
INFO:autocoder_cc.healing.blueprint_healer:Generated 0 missing bindings
{"timestamp": "2025-08-27T08:38:25.489568", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Fixed component type casing: Source -> Source"}
DEBUG:autocoder_cc.healing.blueprint_healer:Fixed component type casing: Source -> Source
{"timestamp": "2025-08-27T08:38:25.489649", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Fixed component type casing: Transformer -> Transformer"}
DEBUG:autocoder_cc.healing.blueprint_healer:Fixed component type casing: Transformer -> Transformer
{"timestamp": "2025-08-27T08:38:25.489737", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Fixed component type casing: Store -> Store"}
DEBUG:autocoder_cc.healing.blueprint_healer:Fixed component type casing: Store -> Store
{"timestamp": "2025-08-27T08:38:25.489816", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Blueprint healing completed - no issues found"}
INFO:autocoder_cc.healing.blueprint_healer:Blueprint healing completed - no issues found
{"timestamp": "2025-08-27T08:38:25.489898", "level": "INFO", "logger_name": "VersionedSchemaManager", "message": "✅ Schema version validation passed: 1.0.0"}
INFO:VersionedSchemaManager:✅ Schema version validation passed: 1.0.0
{"timestamp": "2025-08-27T08:38:25.490103", "level": "INFO", "logger_name": "port_auto_generator", "message": "Starting port auto-generation", "component": "ComponentPortAutoGenerator", "operation": "auto_generate_ports", "tags": {"component_count": 3}}
INFO:port_auto_generator:Starting port auto-generation
{"timestamp": "2025-08-27T08:38:25.490234", "level": "INFO", "logger_name": "port_auto_generator", "message": "Port auto-generation completed", "component": "ComponentPortAutoGenerator", "operation": "ports_generated", "tags": {"components_modified": 0}}
INFO:port_auto_generator:Port auto-generation completed
{"timestamp": "2025-08-27T08:38:25.490449", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.system_blueprint_parser", "message": "Applying schema healing for attempt 1"}
INFO:autocoder_cc.blueprint_language.system_blueprint_parser:Applying schema healing for attempt 1
{"timestamp": "2025-08-27T08:38:25.490653", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Starting blueprint healing process (phase: schema)"}
INFO:autocoder_cc.healing.blueprint_healer:Starting blueprint healing process (phase: schema)
{"timestamp": "2025-08-27T08:38:25.490750", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'error_handling': {'retry_count': 3, 'strategy': 'retry', 'timeout_ms': 5000}, 'from': 'data_generator.output_data', 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}, 'to': 'data_processor.input_data'}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'error_handling': {'retry_count': 3, 'strategy': 'retry', 'timeout_ms': 5000}, 'from': 'data_generator.output_data', 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}, 'to': 'data_processor.input_data'}
{"timestamp": "2025-08-27T08:38:25.490853", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_generator.output_data, To part: data_processor.input_data"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_generator.output_data, To part: data_processor.input_data
{"timestamp": "2025-08-27T08:38:25.490950", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'error_handling': {'retry_count': 3, 'strategy': 'retry', 'timeout_ms': 5000}, 'from': 'data_processor.processed_data', 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}, 'to': 'data_persister.store_data'}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'error_handling': {'retry_count': 3, 'strategy': 'retry', 'timeout_ms': 5000}, 'from': 'data_processor.processed_data', 'qos': {'delivery_guarantee': 'at_least_once', 'ordering': False}, 'to': 'data_persister.store_data'}
{"timestamp": "2025-08-27T08:38:25.491041", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_processor.processed_data, To part: data_persister.store_data"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_processor.processed_data, To part: data_persister.store_data
{"timestamp": "2025-08-27T08:38:25.491133", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'_uses_alt_format': True, 'description': 'Auto-generated: data_generator data flow to data_processor', 'from_component': 'data_generator', 'from_port': 'output', 'generated_by': 'healer_initial', 'to_components': ['data_processor'], 'to_ports': ['input'], 'transformation': 'convert_common_object_schema_to_ItemSchema'}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'_uses_alt_format': True, 'description': 'Auto-generated: data_generator data flow to data_processor', 'from_component': 'data_generator', 'from_port': 'output', 'generated_by': 'healer_initial', 'to_components': ['data_processor'], 'to_ports': ['input'], 'transformation': 'convert_common_object_schema_to_ItemSchema'}
{"timestamp": "2025-08-27T08:38:25.491239", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_generator.output, To part: data_processor.input"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_generator.output, To part: data_processor.input
{"timestamp": "2025-08-27T08:38:25.491331", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Schema mismatch detected: data_generator.output (common_object_schema) -> data_processor.input (ItemSchema)"}
INFO:autocoder_cc.healing.blueprint_healer:Schema mismatch detected: data_generator.output (common_object_schema) -> data_processor.input (ItemSchema)
{"timestamp": "2025-08-27T08:38:25.491426", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Processing binding: {'_uses_alt_format': True, 'description': 'Auto-generated: data_processor processed data to data_persister', 'from_component': 'data_processor', 'from_port': 'output', 'generated_by': 'healer_initial', 'to_components': ['data_persister'], 'to_ports': ['input']}"}
DEBUG:autocoder_cc.healing.blueprint_healer:Processing binding: {'_uses_alt_format': True, 'description': 'Auto-generated: data_processor processed data to data_persister', 'from_component': 'data_processor', 'from_port': 'output', 'generated_by': 'healer_initial', 'to_components': ['data_persister'], 'to_ports': ['input']}
{"timestamp": "2025-08-27T08:38:25.491520", "level": "DEBUG", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "From part: data_processor.output, To part: data_persister.input"}
DEBUG:autocoder_cc.healing.blueprint_healer:From part: data_processor.output, To part: data_persister.input
{"timestamp": "2025-08-27T08:38:25.491616", "level": "WARNING", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Healing stagnated after 2 attempts"}
WARNING:autocoder_cc.healing.blueprint_healer:Healing stagnated after 2 attempts
{"timestamp": "2025-08-27T08:38:25.491701", "level": "WARNING", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Healing may be stagnating - limited operations performed"}
WARNING:autocoder_cc.healing.blueprint_healer:Healing may be stagnating - limited operations performed
{"timestamp": "2025-08-27T08:38:25.491771", "level": "INFO", "logger_name": "autocoder_cc.healing.blueprint_healer", "message": "Blueprint healing completed - no issues found"}
INFO:autocoder_cc.healing.blueprint_healer:Blueprint healing completed - no issues found
INFO:autocoder_cc.blueprint_language.architectural_validator:Starting architectural validation for system: validation_test_system
INFO:autocoder_cc.blueprint_language.architectural_validator:Connectivity validation complete: 0 orphaned components found
INFO:autocoder_cc.blueprint_language.architectural_validator:Architectural validation completed: 0 errors, 0 warnings
{"timestamp": "2025-08-27T08:38:25.492144", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   Blueprint parsed in 0.01s"}
INFO:HealingIntegratedGenerator:   Blueprint parsed in 0.01s
{"timestamp": "2025-08-27T08:38:25.492304", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "🔧 Starting component generation and validation loop..."}
INFO:HealingIntegratedGenerator:🔧 Starting component generation and validation loop...
{"timestamp": "2025-08-27T08:38:25.492426", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "\n🔄 Component validation attempt 1"}
INFO:HealingIntegratedGenerator:
🔄 Component validation attempt 1
{"timestamp": "2025-08-27T08:38:25.492528", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   🔧 Generating components..."}
INFO:HealingIntegratedGenerator:   🔧 Generating components...
{"timestamp": "2025-08-27T08:38:25.492625", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   Generating 3 components..."}
INFO:HealingIntegratedGenerator:   Generating 3 components...
{"timestamp": "2025-08-27T08:38:25.492757", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Generating data_generator with LLM..."}
INFO:HealingIntegratedGenerator:     Generating data_generator with LLM...
{"timestamp": "2025-08-27T08:38:25.493718", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_start", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_generator_1756309105", "component_type": "Source", "component_name": "data_generator", "class_name": "Datagenerator", "provider": "unified_llm_provider", "model": "automatic_fallback"}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_start
{"timestamp": "2025-08-27T08:38:25.493856", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_attempt", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_generator_1756309105", "attempt": 1, "max_attempts": 6, "has_validation_feedback": false, "prompt_length": 7539}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_attempt
INFO:autocoder_cc.llm_providers.unified_llm_provider:Attempt 1: Trying gemini/gemini-2.5-flash
{"timestamp": "2025-08-27T08:38:25.494042", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Created timeout context: llm_call_gemini_2_5_flash_1756309105494 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Created timeout context: llm_call_gemini_2_5_flash_1756309105494 (llm_generation, 3600s)
{"timestamp": "2025-08-27T08:38:25.494156", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Starting timed operation: llm_call_gemini_2_5_flash_1756309105494 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Starting timed operation: llm_call_gemini_2_5_flash_1756309105494 (llm_generation, 3600s)
[92m08:38:25 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
INFO:LiteLLM:
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
{"timestamp": "2025-08-27T08:38:44.773434", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed timed operation: llm_call_gemini_2_5_flash_1756309105494 in 19.28s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed timed operation: llm_call_gemini_2_5_flash_1756309105494 in 19.28s
{"timestamp": "2025-08-27T08:38:44.774265", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed operation: llm_call_gemini_2_5_flash_1756309105494 in 19.28s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed operation: llm_call_gemini_2_5_flash_1756309105494 in 19.28s
INFO:autocoder_cc.llm_providers.unified_llm_provider:✅ Success with gemini/gemini-2.5-flash in 19.28s
INFO:autocoder_cc.llm_providers.unified_llm_provider:Fallback ENABLED - will try multiple models on failure
INFO:autocoder_cc.llm_providers.unified_llm_provider:Unified LLM Provider initialized with models: ['gemini_2_5_flash', 'openai_gpt4o_mini', 'claude_sonnet_4']
{"timestamp": "2025-08-27T08:38:44.783253", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator initialized - no more hanging!", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator initialized - no more hanging!
{"timestamp": "2025-08-27T08:38:44.783503", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator ready - all modules loaded", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator ready - all modules loaded
{"timestamp": "2025-08-27T08:38:44.783621", "level": "INFO", "logger_name": "store_generator", "message": "StoreGenerator initialized", "component": "StoreGenerator", "operation": "init"}
INFO:store_generator:StoreGenerator initialized
INFO:autocoder_cc.blueprint_language.architectural_templates.template_selector:✅ TemplateSelector initialized with architectural templates
{"timestamp": "2025-08-27T08:38:44.783774", "level": "INFO", "logger_name": "component_logic_generator", "message": "ComponentLogicGenerator initialized with observability stack and architectural templates", "component": "ComponentLogicGenerator", "operation": "init", "tags": {"output_dir": "/tmp"}}
INFO:component_logic_generator:ComponentLogicGenerator initialized with observability stack and architectural templates
{"timestamp": "2025-08-27T08:38:44.783875", "level": "INFO", "logger_name": "ComponentLogicGenerator", "message": "✅ ComponentLogicGenerator initialized with architectural templates"}
INFO:ComponentLogicGenerator:✅ ComponentLogicGenerator initialized with architectural templates
{"timestamp": "2025-08-27T08:38:44.785149", "level": "DEBUG", "logger_name": "ComponentLogicGenerator", "message": "Added class definition line: class GeneratedSource_data_generator(ComposedComponent):"}
DEBUG:ComponentLogicGenerator:Added class definition line: class GeneratedSource_data_generator(ComposedComponent):
{"timestamp": "2025-08-27T08:38:44.821278", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_complete", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_generator_1756309105", "total_attempts": 1, "success": true, "provider": "gemini_2_5_flash", "model": "gemini/gemini-2.5-flash"}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_complete
{"timestamp": "2025-08-27T08:38:44.821717", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Generated: data_generator"}
INFO:HealingIntegratedGenerator:     Generated: data_generator
{"timestamp": "2025-08-27T08:38:44.821872", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Generating data_processor with LLM..."}
INFO:HealingIntegratedGenerator:     Generating data_processor with LLM...
{"timestamp": "2025-08-27T08:38:44.822040", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_start", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_processor_1756309124", "component_type": "Transformer", "component_name": "data_processor", "class_name": "Dataprocessor", "provider": "unified_llm_provider", "model": "automatic_fallback"}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_start
{"timestamp": "2025-08-27T08:38:44.822148", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_attempt", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_processor_1756309124", "attempt": 1, "max_attempts": 6, "has_validation_feedback": false, "prompt_length": 7564}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_attempt
INFO:autocoder_cc.llm_providers.unified_llm_provider:Attempt 1: Trying gemini/gemini-2.5-flash
{"timestamp": "2025-08-27T08:38:44.822309", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Created timeout context: llm_call_gemini_2_5_flash_1756309124822 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Created timeout context: llm_call_gemini_2_5_flash_1756309124822 (llm_generation, 3600s)
{"timestamp": "2025-08-27T08:38:44.822398", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Starting timed operation: llm_call_gemini_2_5_flash_1756309124822 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Starting timed operation: llm_call_gemini_2_5_flash_1756309124822 (llm_generation, 3600s)
[92m08:38:44 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
INFO:LiteLLM:
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
{"timestamp": "2025-08-27T08:39:22.942817", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed timed operation: llm_call_gemini_2_5_flash_1756309124822 in 38.12s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed timed operation: llm_call_gemini_2_5_flash_1756309124822 in 38.12s
{"timestamp": "2025-08-27T08:39:22.942987", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed operation: llm_call_gemini_2_5_flash_1756309124822 in 38.12s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed operation: llm_call_gemini_2_5_flash_1756309124822 in 38.12s
WARNING:autocoder_cc.llm_providers.unified_llm_provider:❌ Error with gemini/gemini-2.5-flash: LLM returned empty content (None) from gemini/gemini-2.5-flash
INFO:autocoder_cc.llm_providers.unified_llm_provider:Attempt 2: Trying gpt-4o-mini
{"timestamp": "2025-08-27T08:39:23.945673", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Created timeout context: llm_call_openai_gpt4o_mini_1756309163945 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Created timeout context: llm_call_openai_gpt4o_mini_1756309163945 (llm_generation, 3600s)
{"timestamp": "2025-08-27T08:39:23.945791", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Starting timed operation: llm_call_openai_gpt4o_mini_1756309163945 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Starting timed operation: llm_call_openai_gpt4o_mini_1756309163945 (llm_generation, 3600s)
[92m08:39:23 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gpt-4o-mini; provider = openai
INFO:LiteLLM:
LiteLLM completion() model= gpt-4o-mini; provider = openai
{"timestamp": "2025-08-27T08:39:29.160186", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed timed operation: llm_call_openai_gpt4o_mini_1756309163945 in 5.21s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed timed operation: llm_call_openai_gpt4o_mini_1756309163945 in 5.21s
{"timestamp": "2025-08-27T08:39:29.160989", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed operation: llm_call_openai_gpt4o_mini_1756309163945 in 5.22s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed operation: llm_call_openai_gpt4o_mini_1756309163945 in 5.22s
INFO:autocoder_cc.llm_providers.unified_llm_provider:✅ Success with gpt-4o-mini in 44.34s
INFO:autocoder_cc.llm_providers.unified_llm_provider:Fallback ENABLED - will try multiple models on failure
INFO:autocoder_cc.llm_providers.unified_llm_provider:Unified LLM Provider initialized with models: ['gemini_2_5_flash', 'openai_gpt4o_mini', 'claude_sonnet_4']
{"timestamp": "2025-08-27T08:39:29.163044", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator initialized - no more hanging!", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator initialized - no more hanging!
{"timestamp": "2025-08-27T08:39:29.163307", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator ready - all modules loaded", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator ready - all modules loaded
{"timestamp": "2025-08-27T08:39:29.163422", "level": "INFO", "logger_name": "store_generator", "message": "StoreGenerator initialized", "component": "StoreGenerator", "operation": "init"}
INFO:store_generator:StoreGenerator initialized
INFO:autocoder_cc.blueprint_language.architectural_templates.template_selector:✅ TemplateSelector initialized with architectural templates
{"timestamp": "2025-08-27T08:39:29.163569", "level": "INFO", "logger_name": "component_logic_generator", "message": "ComponentLogicGenerator initialized with observability stack and architectural templates", "component": "ComponentLogicGenerator", "operation": "init", "tags": {"output_dir": "/tmp"}}
INFO:component_logic_generator:ComponentLogicGenerator initialized with observability stack and architectural templates
{"timestamp": "2025-08-27T08:39:29.163695", "level": "INFO", "logger_name": "ComponentLogicGenerator", "message": "✅ ComponentLogicGenerator initialized with architectural templates"}
INFO:ComponentLogicGenerator:✅ ComponentLogicGenerator initialized with architectural templates
{"timestamp": "2025-08-27T08:39:29.164413", "level": "DEBUG", "logger_name": "ComponentLogicGenerator", "message": "Added class definition line: class GeneratedTransformer_data_processor(ComposedComponent):"}
DEBUG:ComponentLogicGenerator:Added class definition line: class GeneratedTransformer_data_processor(ComposedComponent):
{"timestamp": "2025-08-27T08:39:29.199458", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_complete", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_processor_1756309124", "total_attempts": 1, "success": true, "provider": "openai_gpt4o_mini", "model": "gpt-4o-mini"}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_complete
{"timestamp": "2025-08-27T08:39:29.199834", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Generated: data_processor"}
INFO:HealingIntegratedGenerator:     Generated: data_processor
{"timestamp": "2025-08-27T08:39:29.199977", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Using recipe 'Store' structure with LLM implementation for data_persister"}
INFO:HealingIntegratedGenerator:     Using recipe 'Store' structure with LLM implementation for data_persister
{"timestamp": "2025-08-27T08:39:29.200070", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Recipe provides structure, LLM will generate implementation..."}
INFO:HealingIntegratedGenerator:     Recipe provides structure, LLM will generate implementation...
{"timestamp": "2025-08-27T08:39:29.200152", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Generating data_persister with LLM..."}
INFO:HealingIntegratedGenerator:     Generating data_persister with LLM...
{"timestamp": "2025-08-27T08:39:29.200701", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_start", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_persister_1756309169", "component_type": "Store", "component_name": "data_persister", "class_name": "Datapersister", "provider": "unified_llm_provider", "model": "automatic_fallback"}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_start
{"timestamp": "2025-08-27T08:39:29.200861", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_attempt", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_persister_1756309169", "attempt": 1, "max_attempts": 6, "has_validation_feedback": false, "prompt_length": 9368}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_attempt
INFO:autocoder_cc.llm_providers.unified_llm_provider:Attempt 1: Trying gemini/gemini-2.5-flash
{"timestamp": "2025-08-27T08:39:29.201048", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Created timeout context: llm_call_gemini_2_5_flash_1756309169201 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Created timeout context: llm_call_gemini_2_5_flash_1756309169201 (llm_generation, 3600s)
{"timestamp": "2025-08-27T08:39:29.201144", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Starting timed operation: llm_call_gemini_2_5_flash_1756309169201 (llm_generation, 3600s)"}
DEBUG:autocoder_cc.core.timeout_manager:Starting timed operation: llm_call_gemini_2_5_flash_1756309169201 (llm_generation, 3600s)
[92m08:39:29 - LiteLLM:INFO[0m: utils.py:3260 - 
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
INFO:LiteLLM:
LiteLLM completion() model= gemini-2.5-flash; provider = gemini
{"timestamp": "2025-08-27T08:39:42.983280", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed timed operation: llm_call_gemini_2_5_flash_1756309169201 in 13.78s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed timed operation: llm_call_gemini_2_5_flash_1756309169201 in 13.78s
{"timestamp": "2025-08-27T08:39:42.984138", "level": "DEBUG", "logger_name": "autocoder_cc.core.timeout_manager", "message": "Completed operation: llm_call_gemini_2_5_flash_1756309169201 in 13.78s"}
DEBUG:autocoder_cc.core.timeout_manager:Completed operation: llm_call_gemini_2_5_flash_1756309169201 in 13.78s
INFO:autocoder_cc.llm_providers.unified_llm_provider:✅ Success with gemini/gemini-2.5-flash in 13.78s
INFO:autocoder_cc.llm_providers.unified_llm_provider:Fallback ENABLED - will try multiple models on failure
INFO:autocoder_cc.llm_providers.unified_llm_provider:Unified LLM Provider initialized with models: ['gemini_2_5_flash', 'openai_gpt4o_mini', 'claude_sonnet_4']
{"timestamp": "2025-08-27T08:39:42.986827", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator initialized - no more hanging!", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator initialized - no more hanging!
{"timestamp": "2025-08-27T08:39:42.987108", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "Unified LLM Component Generator ready - all modules loaded", "component": "llm_component_generator_unified"}
INFO:autocoder_cc.blueprint_language.llm_component_generator:Unified LLM Component Generator ready - all modules loaded
{"timestamp": "2025-08-27T08:39:42.987209", "level": "INFO", "logger_name": "store_generator", "message": "StoreGenerator initialized", "component": "StoreGenerator", "operation": "init"}
INFO:store_generator:StoreGenerator initialized
INFO:autocoder_cc.blueprint_language.architectural_templates.template_selector:✅ TemplateSelector initialized with architectural templates
{"timestamp": "2025-08-27T08:39:42.987353", "level": "INFO", "logger_name": "component_logic_generator", "message": "ComponentLogicGenerator initialized with observability stack and architectural templates", "component": "ComponentLogicGenerator", "operation": "init", "tags": {"output_dir": "/tmp"}}
INFO:component_logic_generator:ComponentLogicGenerator initialized with observability stack and architectural templates
{"timestamp": "2025-08-27T08:39:42.987456", "level": "INFO", "logger_name": "ComponentLogicGenerator", "message": "✅ ComponentLogicGenerator initialized with architectural templates"}
INFO:ComponentLogicGenerator:✅ ComponentLogicGenerator initialized with architectural templates
{"timestamp": "2025-08-27T08:39:42.989031", "level": "DEBUG", "logger_name": "ComponentLogicGenerator", "message": "Added class definition line: class GeneratedStore_Datapersister(ComposedComponent):"}
DEBUG:ComponentLogicGenerator:Added class definition line: class GeneratedStore_Datapersister(ComposedComponent):
{"timestamp": "2025-08-27T08:39:43.025315", "level": "INFO", "logger_name": "autocoder_cc.blueprint_language.llm_component_generator", "message": "llm_generation_complete", "component": "llm_component_generator_unified", "operation": {"generation_id": "data_persister_1756309169", "total_attempts": 1, "success": true, "provider": "gemini_2_5_flash", "model": "gemini/gemini-2.5-flash"}}
INFO:autocoder_cc.blueprint_language.llm_component_generator:llm_generation_complete
{"timestamp": "2025-08-27T08:39:43.025804", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "     Generated: data_persister"}
INFO:HealingIntegratedGenerator:     Generated: data_persister
{"timestamp": "2025-08-27T08:39:43.025979", "level": "WARNING", "logger_name": "HealingIntegratedGenerator", "message": "Could not find system directory for creating __init__.py files"}
WARNING:HealingIntegratedGenerator:Could not find system directory for creating __init__.py files
{"timestamp": "2025-08-27T08:39:43.026075", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   🚦 Running validation gate..."}
INFO:HealingIntegratedGenerator:   🚦 Running validation gate...
{"timestamp": "2025-08-27T08:39:43.026187", "level": "INFO", "logger_name": "IntegrationValidationGate", "message": "Starting integration validation for validation_test_system"}
INFO:IntegrationValidationGate:Starting integration validation for validation_test_system
{"timestamp": "2025-08-27T08:39:43.035339", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Attempting to instantiate GeneratedStore_Datapersister"}
INFO:IntegrationTestHarness:Attempting to instantiate GeneratedStore_Datapersister
2025-08-27 08:39:43,035 - Component.data_persister - INFO - Component data_persister initialized
INFO:Component.data_persister:Component data_persister initialized
2025-08-27 08:39:43,035 - Component.data_persister - INFO - Datapersister component initialized with storage type: in_memory
INFO:Component.data_persister:Datapersister component initialized with storage type: in_memory
{"timestamp": "2025-08-27T08:39:43.035749", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Successfully instantiated GeneratedStore_Datapersister"}
INFO:IntegrationTestHarness:Successfully instantiated GeneratedStore_Datapersister
{"timestamp": "2025-08-27T08:39:43.036905", "level": "INFO", "logger_name": "AsyncMessageBus", "message": "Registered component: data_persister"}
INFO:AsyncMessageBus:Registered component: data_persister
{"timestamp": "2025-08-27T08:39:43.038971", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Attempting to instantiate GeneratedSource_data_generator"}
INFO:IntegrationTestHarness:Attempting to instantiate GeneratedSource_data_generator
2025-08-27 08:39:43,039 - Component.data_generator - INFO - Component data_generator initialized
INFO:Component.data_generator:Component data_generator initialized
2025-08-27 08:39:43,039 - Component.data_generator - INFO - Initializing DataGenerator component: data_generator
INFO:Component.data_generator:Initializing DataGenerator component: data_generator
2025-08-27 08:39:43,039 - Component.data_generator - INFO - DataGenerator configured: num_items_to_generate=1, data_prefix='record_', start_id=0
INFO:Component.data_generator:DataGenerator configured: num_items_to_generate=1, data_prefix='record_', start_id=0
{"timestamp": "2025-08-27T08:39:43.039424", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Successfully instantiated GeneratedSource_data_generator"}
INFO:IntegrationTestHarness:Successfully instantiated GeneratedSource_data_generator
{"timestamp": "2025-08-27T08:39:43.039516", "level": "INFO", "logger_name": "AsyncMessageBus", "message": "Registered component: data_generator"}
INFO:AsyncMessageBus:Registered component: data_generator
{"timestamp": "2025-08-27T08:39:43.040272", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Attempting to instantiate GeneratedTransformer_data_processor"}
INFO:IntegrationTestHarness:Attempting to instantiate GeneratedTransformer_data_processor
2025-08-27 08:39:43,040 - Component.data_processor - INFO - Component data_processor initialized
INFO:Component.data_processor:Component data_processor initialized
{"timestamp": "2025-08-27T08:39:43.040525", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Successfully instantiated GeneratedTransformer_data_processor"}
INFO:IntegrationTestHarness:Successfully instantiated GeneratedTransformer_data_processor
{"timestamp": "2025-08-27T08:39:43.040615", "level": "INFO", "logger_name": "AsyncMessageBus", "message": "Registered component: data_processor"}
INFO:AsyncMessageBus:Registered component: data_processor
{"timestamp": "2025-08-27T08:39:43.040700", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Loaded 3 components"}
INFO:IntegrationTestHarness:Loaded 3 components
{"timestamp": "2025-08-27T08:39:43.040779", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Initialized component: data_persister"}
INFO:IntegrationTestHarness:Initialized component: data_persister
{"timestamp": "2025-08-27T08:39:43.040867", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Initialized component: data_generator"}
INFO:IntegrationTestHarness:Initialized component: data_generator
{"timestamp": "2025-08-27T08:39:43.040961", "level": "INFO", "logger_name": "IntegrationTestHarness", "message": "Initialized component: data_processor"}
INFO:IntegrationTestHarness:Initialized component: data_processor
2025-08-27 08:39:43,041 - Component.data_persister - WARNING - Unknown action received: None
WARNING:Component.data_persister:Unknown action received: None
2025-08-27 08:39:43,041 - Component.data_persister - WARNING - Unknown action received: None
WARNING:Component.data_persister:Unknown action received: None
2025-08-27 08:39:43,041 - Component.data_persister - WARNING - Unknown action received: None
WARNING:Component.data_persister:Unknown action received: None
2025-08-27 08:39:43,041 - Component.data_generator - WARNING - No communicator set for data_generator, cannot route data
WARNING:Component.data_generator:No communicator set for data_generator, cannot route data
2025-08-27 08:39:43,041 - Component.data_generator - WARNING - No communicator set for data_generator, cannot route data
WARNING:Component.data_generator:No communicator set for data_generator, cannot route data
2025-08-27 08:39:43,041 - Component.data_generator - WARNING - No communicator set for data_generator, cannot route data
WARNING:Component.data_generator:No communicator set for data_generator, cannot route data
2025-08-27 08:39:43,041 - Component.data_processor - INFO - Processing item: {'test': 'data1'}
INFO:Component.data_processor:Processing item: {'test': 'data1'}
2025-08-27 08:39:43,042 - Component.data_processor - ERROR - Error in data_processor: Failed to send transformed item: Component next_component not found
ERROR:Component.data_processor:Error in data_processor: Failed to send transformed item: Component next_component not found
2025-08-27 08:39:43,042 - Component.data_processor - INFO - Processing item: {'test': 'data2'}
INFO:Component.data_processor:Processing item: {'test': 'data2'}
2025-08-27 08:39:43,042 - Component.data_processor - ERROR - Error in data_processor: Failed to send transformed item: Component next_component not found
ERROR:Component.data_processor:Error in data_processor: Failed to send transformed item: Component next_component not found
2025-08-27 08:39:43,042 - Component.data_processor - INFO - Processing item: {'test': 'data3'}
INFO:Component.data_processor:Processing item: {'test': 'data3'}
2025-08-27 08:39:43,042 - Component.data_processor - ERROR - Error in data_processor: Failed to send transformed item: Component next_component not found
ERROR:Component.data_processor:Error in data_processor: Failed to send transformed item: Component next_component not found
{"timestamp": "2025-08-27T08:39:43.043023", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   ✅ All components passed validation!"}
INFO:HealingIntegratedGenerator:   ✅ All components passed validation!
{"timestamp": "2025-08-27T08:39:43.043144", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "🏗️ Generating system scaffold..."}
INFO:HealingIntegratedGenerator:🏗️ Generating system scaffold...
{"timestamp": "2025-08-27T08:39:43.043280", "level": "INFO", "logger_name": "autocoder_cc.core.port_registry", "message": "Component 'metrics' already has port 53831"}
INFO:autocoder_cc.core.port_registry:Component 'metrics' already has port 53831
WARNING:autocoder_cc.blueprint_language.database_config_manager:Removing legacy database field: storage_type
WARNING:autocoder_cc.blueprint_language.database_config_manager:Removing legacy database field: storage_type
{"timestamp": "2025-08-27T08:39:43.048882", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "✅ System generation completed successfully!"}
INFO:HealingIntegratedGenerator:✅ System generation completed successfully!
{"timestamp": "2025-08-27T08:39:43.049011", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   Total time: 77.57s"}
INFO:HealingIntegratedGenerator:   Total time: 77.57s
{"timestamp": "2025-08-27T08:39:43.049098", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   System: validation_test_system"}
INFO:HealingIntegratedGenerator:   System: validation_test_system
{"timestamp": "2025-08-27T08:39:43.049176", "level": "INFO", "logger_name": "HealingIntegratedGenerator", "message": "   Output: /tmp/tmpcv_9bqo7/scaffolds/validation_test_system"}
INFO:HealingIntegratedGenerator:   Output: /tmp/tmpcv_9bqo7/scaffolds/validation_test_system
INFO:VerboseAutocoder:✅ Generated 5 component files with healing applied
INFO:VerboseAutocoder:    🔧 Generating component: data_persister (Store)
DEBUG:VerboseAutocoder:       📋 imports: 0
DEBUG:VerboseAutocoder:       📋 dependencies: 0
DEBUG:VerboseAutocoder:       💻 Generated code:
DEBUG:VerboseAutocoder:            1: 
DEBUG:VerboseAutocoder:            2: import uuid
DEBUG:VerboseAutocoder:            3: from datetime import datetime, timezone
DEBUG:VerboseAutocoder:            4: 
DEBUG:VerboseAutocoder:            5: # Essential imports for all components - use sys.path to ensure imports work
DEBUG:VerboseAutocoder:            6: import sys
DEBUG:VerboseAutocoder:            7: import os
DEBUG:VerboseAutocoder:            8: # Add the components directory to sys.path for imports
DEBUG:VerboseAutocoder:            9: if __name__ != '__main__':
DEBUG:VerboseAutocoder:           10:     sys.path.insert(0, os.path.dirname(__file__))
DEBUG:VerboseAutocoder:           11: from observability import ComposedComponent, SpanStatus
DEBUG:VerboseAutocoder:           12: # Standard library imports - MUST include all typing types used
DEBUG:VerboseAutocoder:           13: from typing import Dict, Any, Optional, List, Tuple, Union, Set
DEBUG:VerboseAutocoder:           14: 
DEBUG:VerboseAutocoder:           15: import uuid
DEBUG:VerboseAutocoder:           16: from datetime import datetime, timezone
DEBUG:VerboseAutocoder:           17: import re
DEBUG:VerboseAutocoder:           18: import time
DEBUG:VerboseAutocoder:           19: 
DEBUG:VerboseAutocoder:           20: class GeneratedStore_Datapersister(ComposedComponent):
DEBUG:VerboseAutocoder:           21:     def __init__(self, name, config):
DEBUG:VerboseAutocoder:           22:         super().__init__(name, config)
DEBUG:VerboseAutocoder:           23:         self.items = {}
DEBUG:VerboseAutocoder:           24:         self.storage_type = config.get("storage_type", "in-memory")
DEBUG:VerboseAutocoder:           25:         self.logger.info(f"Datapersister component initialized with storage type: {self.storage_type}")
DEBUG:VerboseAutocoder:           26: 
DEBUG:VerboseAutocoder:           27:     async def process_item(self, item):
DEBUG:VerboseAutocoder:           28:         """Route actions to appropriate handlers for data persistence."""
DEBUG:VerboseAutocoder:           29:         action = item.get("action")
DEBUG:VerboseAutocoder:           30:         
DEBUG:VerboseAutocoder:          ... (144 more lines)
INFO:VerboseAutocoder:    🔧 Generating component: data_generator (Source)
DEBUG:VerboseAutocoder:       📋 imports: 0
DEBUG:VerboseAutocoder:       📋 dependencies: 0
DEBUG:VerboseAutocoder:       💻 Generated code:
DEBUG:VerboseAutocoder:            1: 
DEBUG:VerboseAutocoder:            2: import uuid
DEBUG:VerboseAutocoder:            3: from datetime import datetime, timezone
DEBUG:VerboseAutocoder:            4: 
DEBUG:VerboseAutocoder:            5: # Essential imports for all components - use sys.path to ensure imports work
DEBUG:VerboseAutocoder:            6: import sys
DEBUG:VerboseAutocoder:            7: import os
DEBUG:VerboseAutocoder:            8: # Add the components directory to sys.path for imports
DEBUG:VerboseAutocoder:            9: if __name__ != '__main__':
DEBUG:VerboseAutocoder:           10:     sys.path.insert(0, os.path.dirname(__file__))
DEBUG:VerboseAutocoder:           11: from observability import ComposedComponent, SpanStatus
DEBUG:VerboseAutocoder:           12: # Standard library imports - MUST include all typing types used
DEBUG:VerboseAutocoder:           13: from typing import Dict, Any, Optional, List, Tuple, Union, Set
DEBUG:VerboseAutocoder:           14: 
DEBUG:VerboseAutocoder:           15: from datetime import datetime, timezone
DEBUG:VerboseAutocoder:           16: 
DEBUG:VerboseAutocoder:           17: class GeneratedSource_data_generator(ComposedComponent):
DEBUG:VerboseAutocoder:           18:     def __init__(self, name: str, config: Dict[str, Any] = None):
DEBUG:VerboseAutocoder:           19:         super().__init__(name, config)
DEBUG:VerboseAutocoder:           20:         self.logger.info(f"Initializing DataGenerator component: {name}")
DEBUG:VerboseAutocoder:           21: 
DEBUG:VerboseAutocoder:           22:         # Configuration for data generation
DEBUG:VerboseAutocoder:           23:         self._num_items_to_generate = int(self.config.get("num_items_to_generate", 1))
DEBUG:VerboseAutocoder:           24:         self._data_prefix = self.config.get("data_prefix", "record_")
DEBUG:VerboseAutocoder:           25:         self._start_id = int(self.config.get("start_id", 0))
DEBUG:VerboseAutocoder:           26: 
DEBUG:VerboseAutocoder:           27:         self._current_record_id = self._start_id
DEBUG:VerboseAutocoder:           28:         self.logger.info(f"DataGenerator configured: num_items_to_generate={self._num_items_to_generate}, data_prefix='{self._data_prefix}', start_id={self._start_id}")
DEBUG:VerboseAutocoder:           29: 
DEBUG:VerboseAutocoder:           30:     async def process_item(self, item: Any) -> Any:
DEBUG:VerboseAutocoder:          ... (81 more lines)
INFO:VerboseAutocoder:    🔧 Generating component: data_processor (Transformer)
DEBUG:VerboseAutocoder:       📋 imports: 0
DEBUG:VerboseAutocoder:       📋 dependencies: 0
DEBUG:VerboseAutocoder:       💻 Generated code:
DEBUG:VerboseAutocoder:            1: 
DEBUG:VerboseAutocoder:            2: import uuid
DEBUG:VerboseAutocoder:            3: from datetime import datetime, timezone
DEBUG:VerboseAutocoder:            4: 
DEBUG:VerboseAutocoder:            5: # Essential imports for all components - use sys.path to ensure imports work
DEBUG:VerboseAutocoder:            6: import sys
DEBUG:VerboseAutocoder:            7: import os
DEBUG:VerboseAutocoder:            8: # Add the components directory to sys.path for imports
DEBUG:VerboseAutocoder:            9: if __name__ != '__main__':
DEBUG:VerboseAutocoder:           10:     sys.path.insert(0, os.path.dirname(__file__))
DEBUG:VerboseAutocoder:           11: from observability import ComposedComponent, SpanStatus
DEBUG:VerboseAutocoder:           12: # Standard library imports - MUST include all typing types used
DEBUG:VerboseAutocoder:           13: from typing import Dict, Any, Optional, List, Tuple, Union, Set
DEBUG:VerboseAutocoder:           14: 
DEBUG:VerboseAutocoder:           15: 
DEBUG:VerboseAutocoder:           16: 
DEBUG:VerboseAutocoder:           17: class GeneratedTransformer_data_processor(ComposedComponent):
DEBUG:VerboseAutocoder:           18:     def __init__(self, name: str, config: dict = None):
DEBUG:VerboseAutocoder:           19:         super().__init__(name, config)
DEBUG:VerboseAutocoder:           20:         self.transformation_rule = config.get("transformation_rule", "default_rule")
DEBUG:VerboseAutocoder:           21: 
DEBUG:VerboseAutocoder:           22:     async def process_item(self, item: Any) -> Any:
DEBUG:VerboseAutocoder:           23:         try:
DEBUG:VerboseAutocoder:           24:             self.logger.info(f"Processing item: {item}")
DEBUG:VerboseAutocoder:           25:             transformed_item = self.apply_transformation(item)
DEBUG:VerboseAutocoder:           26:             self.metrics_collector.counter("items_processed", 1)
DEBUG:VerboseAutocoder:           27:             response = await self.send_to_component("next_component", transformed_item)
DEBUG:VerboseAutocoder:           28:             if response.get("status") == "error":
DEBUG:VerboseAutocoder:           29:                 self.handle_error(Exception(response["message"]), "Failed to send transformed item")
DEBUG:VerboseAutocoder:           30:                 return {"status": "error", "message": "Failed to process item"}
DEBUG:VerboseAutocoder:          ... (27 more lines)
INFO:VerboseAutocoder:  ✅ Generate Component Implementations with Self-Healing (⏱️ 77.58s)
INFO:VerboseAutocoder:  ▶️  Validate Architectural Compliance
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Loaded 12 files for compliance analysis
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: messaging_architecture
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern messaging_architecture: PASSED
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: database_architecture
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern database_architecture: PASSED
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: api_architecture
WARNING:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern api_architecture: 1 violations found
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: security_architecture
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern security_architecture: PASSED
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Compliance check complete: PASSED
INFO:VerboseAutocoder:✅ System passes architectural compliance validation
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Loaded 12 files for compliance analysis
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: messaging_architecture
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern messaging_architecture: PASSED
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: database_architecture
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern database_architecture: PASSED
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: api_architecture
WARNING:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern api_architecture: 1 violations found
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Checking compliance for pattern: security_architecture
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Pattern security_architecture: PASSED
INFO:autocoder_cc.blueprint_language.blueprint_compliance_engine:Compliance check complete: PASSED
INFO:VerboseAutocoder:    📄 Generated: COMPLIANCE_REPORT.md
INFO:VerboseAutocoder:       📏 Size: 618 chars, 24 lines
DEBUG:VerboseAutocoder:       🏷️  file_type: compliance_report
DEBUG:VerboseAutocoder:       🏷️  compliance_status: PASSED
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: # Blueprint Compliance Report
DEBUG:VerboseAutocoder:            2: Generated: 2025-08-27 08:39:43
DEBUG:VerboseAutocoder:            3: 
DEBUG:VerboseAutocoder:            4: ## Summary
DEBUG:VerboseAutocoder:            5: **Compliance Status:** ✅ PASSED
DEBUG:VerboseAutocoder:            6: **Total Violations:** 1
DEBUG:VerboseAutocoder:            7: **Critical:** 0
DEBUG:VerboseAutocoder:            8: **High:** 0
DEBUG:VerboseAutocoder:            9: **Medium:** 1
DEBUG:VerboseAutocoder:           10: **Low:** 0
DEBUG:VerboseAutocoder:           11: 
DEBUG:VerboseAutocoder:           12: ## ✅ Passed Compliance Checks
DEBUG:VerboseAutocoder:           13: - messaging_architecture
DEBUG:VerboseAutocoder:           14: - database_architecture
DEBUG:VerboseAutocoder:           15: - security_architecture
DEBUG:VerboseAutocoder:           16: 
DEBUG:VerboseAutocoder:           17: ## ❌ Compliance Violations
DEBUG:VerboseAutocoder:           18: ### MEDIUM Priority
DEBUG:VerboseAutocoder:           19: **missing_cors_configuration** (main.py)
DEBUG:VerboseAutocoder:           20: - **Description:** FastAPI application missing CORS configuration
DEBUG:VerboseAutocoder:          ... (5 more lines)
INFO:VerboseAutocoder:📊 Compliance Summary: 1 violations (0 critical, 0 high priority)
INFO:VerboseAutocoder:  ✅ Validate Architectural Compliance (⏱️ 0.03s)
INFO:VerboseAutocoder:  ▶️  Generate Component Tests
{"timestamp": "2025-08-27T08:39:43.081737", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🧪 Starting test generation for system: validation_test_system"}
INFO:PropertyTestGenerator:🧪 Starting test generation for system: validation_test_system
{"timestamp": "2025-08-27T08:39:43.082307", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: openai:gpt-4o-mini (gpt-4o-mini (Environment))"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: openai:gpt-4o-mini (gpt-4o-mini (Environment))
{"timestamp": "2025-08-27T08:39:43.082400", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered environment model: gpt-4o-mini"}
INFO:autocoder_cc.llm_providers.model_registry:Registered environment model: gpt-4o-mini
{"timestamp": "2025-08-27T08:39:43.082485", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: openai:o4-mini (O4 Mini)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: openai:o4-mini (O4 Mini)
{"timestamp": "2025-08-27T08:39:43.082566", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: openai:o3 (O3)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: openai:o3 (O3)
{"timestamp": "2025-08-27T08:39:43.082645", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: openai:gpt-4-turbo (GPT-4 Turbo)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: openai:gpt-4-turbo (GPT-4 Turbo)
{"timestamp": "2025-08-27T08:39:43.082723", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: openai:gpt-4o (GPT-4 Optimized)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: openai:gpt-4o (GPT-4 Optimized)
{"timestamp": "2025-08-27T08:39:43.082798", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: anthropic:claude-sonnet-4-20250514 (Claude 3.5 Sonnet)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: anthropic:claude-sonnet-4-20250514 (Claude 3.5 Sonnet)
{"timestamp": "2025-08-27T08:39:43.082873", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: anthropic:claude-opus-4-20250514 (Claude 3 Opus)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: anthropic:claude-opus-4-20250514 (Claude 3 Opus)
{"timestamp": "2025-08-27T08:39:43.082946", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: gemini:gemini-2.5-flash (Gemini 2.5 Flash)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: gemini:gemini-2.5-flash (Gemini 2.5 Flash)
{"timestamp": "2025-08-27T08:39:43.083031", "level": "INFO", "logger_name": "autocoder_cc.llm_providers.model_registry", "message": "Registered model: gemini:gemini-2.5-pro (Gemini 2.5 Pro)"}
INFO:autocoder_cc.llm_providers.model_registry:Registered model: gemini:gemini-2.5-pro (Gemini 2.5 Pro)
{"timestamp": "2025-08-27T08:39:43.084364", "level": "WARNING", "logger_name": "LLMSchemaGenerator", "message": "Anthropic provider not available - install anthropic module"}
WARNING:LLMSchemaGenerator:Anthropic provider not available - install anthropic module
INFO:autocoder_cc.llm_providers.provider_registry:Registered LLM provider: openai
{"timestamp": "2025-08-27T08:39:43.433505", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "Registered OpenAI provider"}
INFO:LLMSchemaGenerator:Registered OpenAI provider
INFO:autocoder_cc.llm_providers.provider_registry:Registered LLM provider: gemini
{"timestamp": "2025-08-27T08:39:43.433726", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "Registered Gemini provider"}
INFO:LLMSchemaGenerator:Registered Gemini provider
{"timestamp": "2025-08-27T08:39:43.433811", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "Available LLM providers: ['openai', 'gemini']"}
INFO:LLMSchemaGenerator:Available LLM providers: ['openai', 'gemini']
{"timestamp": "2025-08-27T08:39:43.434600", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "📋 Processing component: data_generator"}
INFO:PropertyTestGenerator:📋 Processing component: data_generator
{"timestamp": "2025-08-27T08:39:43.435071", "level": "INFO", "logger_name": "BlueprintComponentConverter", "message": "✅ Converted data_generator → DataGenerator"}
INFO:BlueprintComponentConverter:✅ Converted data_generator → DataGenerator
{"timestamp": "2025-08-27T08:39:43.435180", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🤖 Generating schemas for data_generator"}
INFO:PropertyTestGenerator:🤖 Generating schemas for data_generator
{"timestamp": "2025-08-27T08:39:43.435300", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
ERROR:autocoder_cc.llm_providers.multi_provider_manager:Health check timed out for gemini after 5s
INFO:autocoder_cc.llm_providers.multi_provider_manager:All providers failed, waiting 1.0s before retry
INFO:autocoder_cc.llm_providers.multi_provider_manager:All providers failed, waiting 2.0s before retry
{"timestamp": "2025-08-27T08:39:57.359345", "level": "WARNING", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1 failed: All providers failed after maximum retries"}
WARNING:LLMSchemaGenerator:LLM schema generation attempt 1 failed: All providers failed after maximum retries
{"timestamp": "2025-08-27T08:39:57.359481", "level": "WARNING", "logger_name": "LLMSchemaGenerator", "message": "Exception type: LLMProviderError"}
WARNING:LLMSchemaGenerator:Exception type: LLMProviderError
{"timestamp": "2025-08-27T08:39:57.359565", "level": "WARNING", "logger_name": "LLMSchemaGenerator", "message": "Full exception details: LLMProviderError('All providers failed after maximum retries')"}
WARNING:LLMSchemaGenerator:Full exception details: LLMProviderError('All providers failed after maximum retries')
{"timestamp": "2025-08-27T08:39:57.359659", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "Retrying in 1.78 seconds..."}
INFO:LLMSchemaGenerator:Retrying in 1.78 seconds...
{"timestamp": "2025-08-27T08:39:59.142537", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 2/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 2/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000318)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000068 (Daily: $0.0086, Monthly: $0.0107)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000068)
{"timestamp": "2025-08-27T08:40:09.765561", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:40:09.766701", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:40:09.766833", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated config schema for data_generator (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated config schema for data_generator (attempt 1)
{"timestamp": "2025-08-27T08:40:09.766963", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000318)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000057 (Daily: $0.0086, Monthly: $0.0107)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000057)
{"timestamp": "2025-08-27T08:40:19.030824", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:40:19.031339", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:40:19.031442", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated output schema for data_generator (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated output schema for data_generator (attempt 1)
{"timestamp": "2025-08-27T08:40:19.031536", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "📝 Updated 2 schemas for DataGenerator"}
INFO:PropertyTestGenerator:📝 Updated 2 schemas for DataGenerator
{"timestamp": "2025-08-27T08:40:19.031620", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🔧 Generating property tests for data_generator"}
INFO:PropertyTestGenerator:🔧 Generating property tests for data_generator
{"timestamp": "2025-08-27T08:40:19.031698", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🧪 Generating property tests for DataGenerator"}
INFO:PropertyTestGenerator:🧪 Generating property tests for DataGenerator
{"timestamp": "2025-08-27T08:40:19.034492", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Generated 17 property tests for DataGenerator"}
INFO:PropertyTestGenerator:✅ Generated 17 property tests for DataGenerator
{"timestamp": "2025-08-27T08:40:19.034662", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Generated 17 tests for data_generator"}
INFO:PropertyTestGenerator:✅ Generated 17 tests for data_generator
{"timestamp": "2025-08-27T08:40:19.034764", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "📋 Processing component: data_processor"}
INFO:PropertyTestGenerator:📋 Processing component: data_processor
{"timestamp": "2025-08-27T08:40:19.035341", "level": "INFO", "logger_name": "BlueprintComponentConverter", "message": "✅ Converted data_processor → DataProcessor"}
INFO:BlueprintComponentConverter:✅ Converted data_processor → DataProcessor
{"timestamp": "2025-08-27T08:40:19.035442", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🤖 Generating schemas for data_processor"}
INFO:PropertyTestGenerator:🤖 Generating schemas for data_processor
{"timestamp": "2025-08-27T08:40:19.035539", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000321)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000074 (Daily: $0.0087, Monthly: $0.0108)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000074)
{"timestamp": "2025-08-27T08:40:35.460806", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:40:35.461616", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:40:35.461725", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated config schema for data_processor (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated config schema for data_processor (attempt 1)
{"timestamp": "2025-08-27T08:40:35.461831", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000320)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000068 (Daily: $0.0088, Monthly: $0.0109)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000068)
{"timestamp": "2025-08-27T08:40:44.848505", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:40:44.849177", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:40:44.849277", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated input schema for data_processor (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated input schema for data_processor (attempt 1)
{"timestamp": "2025-08-27T08:40:44.849381", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000321)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000066 (Daily: $0.0088, Monthly: $0.0109)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000066)
{"timestamp": "2025-08-27T08:40:54.850304", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:40:54.851105", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:40:54.851206", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated output schema for data_processor (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated output schema for data_processor (attempt 1)
{"timestamp": "2025-08-27T08:40:54.851295", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "📝 Updated 3 schemas for DataProcessor"}
INFO:PropertyTestGenerator:📝 Updated 3 schemas for DataProcessor
{"timestamp": "2025-08-27T08:40:54.851374", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🔧 Generating property tests for data_processor"}
INFO:PropertyTestGenerator:🔧 Generating property tests for data_processor
{"timestamp": "2025-08-27T08:40:54.851459", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🧪 Generating property tests for DataProcessor"}
INFO:PropertyTestGenerator:🧪 Generating property tests for DataProcessor
{"timestamp": "2025-08-27T08:40:54.854146", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Generated 20 property tests for DataProcessor"}
INFO:PropertyTestGenerator:✅ Generated 20 property tests for DataProcessor
{"timestamp": "2025-08-27T08:40:54.854320", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Generated 20 tests for data_processor"}
INFO:PropertyTestGenerator:✅ Generated 20 tests for data_processor
{"timestamp": "2025-08-27T08:40:54.854423", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "📋 Processing component: data_persister"}
INFO:PropertyTestGenerator:📋 Processing component: data_persister
{"timestamp": "2025-08-27T08:40:54.854933", "level": "INFO", "logger_name": "BlueprintComponentConverter", "message": "✅ Converted data_persister → DataPersister"}
INFO:BlueprintComponentConverter:✅ Converted data_persister → DataPersister
{"timestamp": "2025-08-27T08:40:54.855041", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🤖 Generating schemas for data_persister"}
INFO:PropertyTestGenerator:🤖 Generating schemas for data_persister
{"timestamp": "2025-08-27T08:40:54.855146", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000319)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000073 (Daily: $0.0089, Monthly: $0.0110)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000073)
{"timestamp": "2025-08-27T08:41:02.163513", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:41:02.164275", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:41:02.164399", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated config schema for data_persister (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated config schema for data_persister (attempt 1)
{"timestamp": "2025-08-27T08:41:02.164503", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000319)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000066 (Daily: $0.0090, Monthly: $0.0111)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000066)
{"timestamp": "2025-08-27T08:41:09.191375", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:41:09.192458", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:41:09.192608", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated entity schema for data_persister (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated entity schema for data_persister (attempt 1)
{"timestamp": "2025-08-27T08:41:09.192735", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "LLM schema generation attempt 1/6"}
DEBUG:LLMSchemaGenerator:LLM schema generation attempt 1/6
INFO:autocoder_cc.llm_providers.multi_provider_manager:Attempting generation with gemini (attempt 1, estimated cost: $0.000319)
INFO:autocoder_cc.observability.cost_controls:Cost recorded: $0.000088 (Daily: $0.0091, Monthly: $0.0112)
INFO:autocoder_cc.llm_providers.multi_provider_manager:Successful generation with gemini (actual cost: $0.000088)
{"timestamp": "2025-08-27T08:41:22.773462", "level": "DEBUG", "logger_name": "LLMSchemaGenerator", "message": "Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\\nf'"}
DEBUG:LLMSchemaGenerator:Raw generated code starts with: 'from pydantic import BaseModel, Field, validator\nf'
{"timestamp": "2025-08-27T08:41:22.774640", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "AST security validation passed for generated schema"}
INFO:LLMSchemaGenerator:AST security validation passed for generated schema
{"timestamp": "2025-08-27T08:41:22.774739", "level": "INFO", "logger_name": "LLMSchemaGenerator", "message": "✅ Generated query schema for data_persister (attempt 1)"}
INFO:LLMSchemaGenerator:✅ Generated query schema for data_persister (attempt 1)
{"timestamp": "2025-08-27T08:41:22.774829", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "📝 Updated 3 schemas for DataPersister"}
INFO:PropertyTestGenerator:📝 Updated 3 schemas for DataPersister
{"timestamp": "2025-08-27T08:41:22.774909", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🔧 Generating property tests for data_persister"}
INFO:PropertyTestGenerator:🔧 Generating property tests for data_persister
{"timestamp": "2025-08-27T08:41:22.774999", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "🧪 Generating property tests for DataPersister"}
INFO:PropertyTestGenerator:🧪 Generating property tests for DataPersister
{"timestamp": "2025-08-27T08:41:22.777715", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Generated 20 property tests for DataPersister"}
INFO:PropertyTestGenerator:✅ Generated 20 property tests for DataPersister
{"timestamp": "2025-08-27T08:41:22.777900", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Generated 20 tests for data_persister"}
INFO:PropertyTestGenerator:✅ Generated 20 tests for data_persister
{"timestamp": "2025-08-27T08:41:22.778003", "level": "INFO", "logger_name": "PropertyTestGenerator", "message": "✅ Generated 5 test files for validation_test_system"}
INFO:PropertyTestGenerator:✅ Generated 5 test files for validation_test_system
INFO:VerboseAutocoder:    📄 Generated: /tmp/tmpcv_9bqo7/tests/validation_test_system/conftest.py
INFO:VerboseAutocoder:       📏 Size: 933 chars, 37 lines
DEBUG:VerboseAutocoder:       🏷️  component_name: conftest
DEBUG:VerboseAutocoder:       🏷️  file_type: component_test
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: #!/usr/bin/env python3
DEBUG:VerboseAutocoder:            2: """
DEBUG:VerboseAutocoder:            3: Pytest configuration for validation_test_system tests
DEBUG:VerboseAutocoder:            4: Generated by Autocoder V5.2
DEBUG:VerboseAutocoder:            5: """
DEBUG:VerboseAutocoder:            6: import pytest
DEBUG:VerboseAutocoder:            7: import asyncio
DEBUG:VerboseAutocoder:            8: import sys
DEBUG:VerboseAutocoder:            9: from pathlib import Path
DEBUG:VerboseAutocoder:           10: 
DEBUG:VerboseAutocoder:           11: # Add parent directory to path for imports
DEBUG:VerboseAutocoder:           12: sys.path.insert(0, str(Path(__file__).parent.parent))
DEBUG:VerboseAutocoder:           13: 
DEBUG:VerboseAutocoder:           14: @pytest.fixture
DEBUG:VerboseAutocoder:           15: def event_loop():
DEBUG:VerboseAutocoder:           16:     """Create an instance of the default event loop for each test case."""
DEBUG:VerboseAutocoder:           17:     loop = asyncio.get_event_loop_policy().new_event_loop()
DEBUG:VerboseAutocoder:           18:     yield loop
DEBUG:VerboseAutocoder:           19:     loop.close()
DEBUG:VerboseAutocoder:           20: 
DEBUG:VerboseAutocoder:          ... (18 more lines)
INFO:VerboseAutocoder:    📄 Generated: /tmp/tmpcv_9bqo7/tests/validation_test_system/__init__.py
INFO:VerboseAutocoder:       📏 Size: 39 chars, 0 lines
DEBUG:VerboseAutocoder:       🏷️  component_name: __init__
DEBUG:VerboseAutocoder:       🏷️  file_type: component_test
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: """Test package for generated system"""
INFO:VerboseAutocoder:    📄 Generated: /tmp/tmpcv_9bqo7/tests/validation_test_system/test_datagenerator_properties.py
INFO:VerboseAutocoder:       📏 Size: 18516 chars, 410 lines
DEBUG:VerboseAutocoder:       🏷️  component_name: DataGenerator
DEBUG:VerboseAutocoder:       🏷️  file_type: component_test
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: from datetime import datetime
DEBUG:VerboseAutocoder:            2: from typing import Dict, Any, List, Optional
DEBUG:VerboseAutocoder:            3: import asyncio
DEBUG:VerboseAutocoder:            4: import time
DEBUG:VerboseAutocoder:            5: 
DEBUG:VerboseAutocoder:            6: from hypothesis import given, strategies as st
DEBUG:VerboseAutocoder:            7: from pydantic import ValidationError
DEBUG:VerboseAutocoder:            8: import pytest
DEBUG:VerboseAutocoder:            9: 
DEBUG:VerboseAutocoder:           10: )
DEBUG:VerboseAutocoder:           11: ComponentValidationError,
DEBUG:VerboseAutocoder:           12: DependencyValidationError,
DEBUG:VerboseAutocoder:           13: SchemaValidationError
DEBUG:VerboseAutocoder:           14: from ..components.data_generator import DataGenerator
DEBUG:VerboseAutocoder:           15: from ..components.data_generator import DataGeneratorConfigSchema, DataGeneratorDataSchema
DEBUG:VerboseAutocoder:           16: from autocoder_cc.components.enhanced_base import (
DEBUG:VerboseAutocoder:           17: 
DEBUG:VerboseAutocoder:           18: class TestDataGeneratorProperties:
DEBUG:VerboseAutocoder:           19:     """Property-based test suite for DataGenerator with V5.0 fail-hard validation"""
DEBUG:VerboseAutocoder:           20: 
DEBUG:VerboseAutocoder:          ... (391 more lines)
INFO:VerboseAutocoder:    📄 Generated: /tmp/tmpcv_9bqo7/tests/validation_test_system/test_dataprocessor_properties.py
INFO:VerboseAutocoder:       📏 Size: 21306 chars, 472 lines
DEBUG:VerboseAutocoder:       🏷️  component_name: DataProcessor
DEBUG:VerboseAutocoder:       🏷️  file_type: component_test
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: from datetime import datetime
DEBUG:VerboseAutocoder:            2: from typing import Dict, Any, List, Optional
DEBUG:VerboseAutocoder:            3: import asyncio
DEBUG:VerboseAutocoder:            4: import time
DEBUG:VerboseAutocoder:            5: 
DEBUG:VerboseAutocoder:            6: from hypothesis import given, strategies as st
DEBUG:VerboseAutocoder:            7: from pydantic import ValidationError
DEBUG:VerboseAutocoder:            8: import pytest
DEBUG:VerboseAutocoder:            9: 
DEBUG:VerboseAutocoder:           10: )
DEBUG:VerboseAutocoder:           11: ComponentValidationError,
DEBUG:VerboseAutocoder:           12: DependencyValidationError,
DEBUG:VerboseAutocoder:           13: SchemaValidationError
DEBUG:VerboseAutocoder:           14: from ..components.data_processor import DataProcessor
DEBUG:VerboseAutocoder:           15: from ..components.data_processor import DataProcessorConfigSchema, DataProcessorInputSchema, DataProcessorOutputSchema
DEBUG:VerboseAutocoder:           16: from autocoder_cc.components.enhanced_base import (
DEBUG:VerboseAutocoder:           17: 
DEBUG:VerboseAutocoder:           18: class TestDataProcessorProperties:
DEBUG:VerboseAutocoder:           19:     """Property-based test suite for DataProcessor with V5.0 fail-hard validation"""
DEBUG:VerboseAutocoder:           20: 
DEBUG:VerboseAutocoder:          ... (453 more lines)
INFO:VerboseAutocoder:    📄 Generated: /tmp/tmpcv_9bqo7/tests/validation_test_system/test_datapersister_properties.py
INFO:VerboseAutocoder:       📏 Size: 21306 chars, 472 lines
DEBUG:VerboseAutocoder:       🏷️  component_name: DataPersister
DEBUG:VerboseAutocoder:       🏷️  file_type: component_test
DEBUG:VerboseAutocoder:       📝 Content:
DEBUG:VerboseAutocoder:            1: from datetime import datetime
DEBUG:VerboseAutocoder:            2: from typing import Dict, Any, List, Optional
DEBUG:VerboseAutocoder:            3: import asyncio
DEBUG:VerboseAutocoder:            4: import time
DEBUG:VerboseAutocoder:            5: 
DEBUG:VerboseAutocoder:            6: from hypothesis import given, strategies as st
DEBUG:VerboseAutocoder:            7: from pydantic import ValidationError
DEBUG:VerboseAutocoder:            8: import pytest
DEBUG:VerboseAutocoder:            9: 
DEBUG:VerboseAutocoder:           10: )
DEBUG:VerboseAutocoder:           11: ComponentValidationError,
DEBUG:VerboseAutocoder:           12: DependencyValidationError,
DEBUG:VerboseAutocoder:           13: SchemaValidationError
DEBUG:VerboseAutocoder:           14: from ..components.data_persister import DataPersister
DEBUG:VerboseAutocoder:           15: from ..components.data_persister import DataPersisterConfigSchema, DataPersisterEntitySchema, DataPersisterQuerySchema
DEBUG:VerboseAutocoder:           16: from autocoder_cc.components.enhanced_base import (
DEBUG:VerboseAutocoder:           17: 
DEBUG:VerboseAutocoder:           18: class TestDataPersisterProperties:
DEBUG:VerboseAutocoder:           19:     """Property-based test suite for DataPersister with V5.0 fail-hard validation"""
DEBUG:VerboseAutocoder:           20: 
DEBUG:VerboseAutocoder:          ... (453 more lines)
INFO:VerboseAutocoder:✅ Generated 5 test files successfully
INFO:VerboseAutocoder:  ✅ Generate Component Tests (⏱️ 99.70s)
INFO:VerboseAutocoder:📋 Skipping deployment generation (skip_deployment=True)
INFO:VerboseAutocoder:  ▶️  Assemble Final System
INFO:VerboseAutocoder:  ✅ Assemble Final System (⏱️ 0.03s)
INFO:VerboseAutocoder:  📊 Components Generated: 3 components
INFO:VerboseAutocoder:  📊 Tests Generated: 5 test files
INFO:VerboseAutocoder:  📊 K8s Manifests: 0 manifests
INFO:VerboseAutocoder:✅ Generate System: validation_test_system (⏱️ 186.75s)
INFO:VerboseAutocoder:
INFO:VerboseAutocoder:🏁 GENERATION SESSION COMPLETED
INFO:VerboseAutocoder:⏱️  Total duration: 186.80s
INFO:VerboseAutocoder:📊 Steps: 12 completed, 0 failed, 12 total
INFO:VerboseAutocoder:📄 Files generated: 15
INFO:VerboseAutocoder:📋 Complete session log: /tmp/tmpcv_9bqo7/generation_verbose.json
